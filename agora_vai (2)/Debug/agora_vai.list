
agora_vai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001da0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08001e60  08001e60  00011e60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f8c  08001f8c  00011f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f90  08001f90  00011f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001cc  20000014  08001fa8  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001e0  08001fa8  000201e0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c340  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c7a  00000000  00000000  0002c37c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006ca7  00000000  00000000  0002dff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000898  00000000  00000000  00034ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c30  00000000  00000000  00035538  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000487d  00000000  00000000  00036168  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003572  00000000  00000000  0003a9e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003df57  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ba8  00000000  00000000  0003dfd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e48 	.word	0x08001e48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08001e48 	.word	0x08001e48

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000248:	20fa      	movs	r0, #250	; 0xfa
 800024a:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <HAL_InitTick+0x3c>)
 800024c:	0080      	lsls	r0, r0, #2
 800024e:	7819      	ldrb	r1, [r3, #0]
 8000250:	f7ff ff6c 	bl	800012c <__udivsi3>
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <HAL_InitTick+0x40>)
 8000256:	0001      	movs	r1, r0
 8000258:	6818      	ldr	r0, [r3, #0]
 800025a:	f7ff ff67 	bl	800012c <__udivsi3>
 800025e:	f000 f885 	bl	800036c <HAL_SYSTICK_Config>
 8000262:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000264:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000266:	2c00      	cmp	r4, #0
 8000268:	d109      	bne.n	800027e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800026a:	2d03      	cmp	r5, #3
 800026c:	d807      	bhi.n	800027e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800026e:	3802      	subs	r0, #2
 8000270:	0022      	movs	r2, r4
 8000272:	0029      	movs	r1, r5
 8000274:	f000 f83e 	bl	80002f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000278:	0020      	movs	r0, r4
 800027a:	4b03      	ldr	r3, [pc, #12]	; (8000288 <HAL_InitTick+0x44>)
 800027c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	20000000 	.word	0x20000000
 8000284:	20000010 	.word	0x20000010
 8000288:	20000004 	.word	0x20000004

0800028c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800028c:	2310      	movs	r3, #16
 800028e:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_Init+0x1c>)
{
 8000290:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000292:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000294:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000296:	430b      	orrs	r3, r1
 8000298:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800029a:	f7ff ffd3 	bl	8000244 <HAL_InitTick>
  HAL_MspInit();
 800029e:	f001 fc5f 	bl	8001b60 <HAL_MspInit>
}
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002ac:	4a03      	ldr	r2, [pc, #12]	; (80002bc <HAL_IncTick+0x10>)
 80002ae:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <HAL_IncTick+0x14>)
 80002b0:	6811      	ldr	r1, [r2, #0]
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	185b      	adds	r3, r3, r1
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	4770      	bx	lr
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	20000048 	.word	0x20000048
 80002c0:	20000000 	.word	0x20000000

080002c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002c4:	4b01      	ldr	r3, [pc, #4]	; (80002cc <HAL_GetTick+0x8>)
 80002c6:	6818      	ldr	r0, [r3, #0]
}
 80002c8:	4770      	bx	lr
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	20000048 	.word	0x20000048

080002d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002d4:	f7ff fff6 	bl	80002c4 <HAL_GetTick>
 80002d8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002da:	1c63      	adds	r3, r4, #1
 80002dc:	d002      	beq.n	80002e4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <HAL_Delay+0x20>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002e4:	f7ff ffee 	bl	80002c4 <HAL_GetTick>
 80002e8:	1b40      	subs	r0, r0, r5
 80002ea:	4284      	cmp	r4, r0
 80002ec:	d8fa      	bhi.n	80002e4 <HAL_Delay+0x14>
  {
  }
}
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	20000000 	.word	0x20000000

080002f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80002f8:	2800      	cmp	r0, #0
 80002fa:	db12      	blt.n	8000322 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	4a13      	ldr	r2, [pc, #76]	; (800034c <HAL_NVIC_SetPriority+0x58>)
 8000300:	2403      	movs	r4, #3
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	189b      	adds	r3, r3, r2
 8000306:	22ff      	movs	r2, #255	; 0xff
 8000308:	4020      	ands	r0, r4
 800030a:	40a0      	lsls	r0, r4
 800030c:	0014      	movs	r4, r2
 800030e:	25c0      	movs	r5, #192	; 0xc0
 8000310:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000312:	4011      	ands	r1, r2
 8000314:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000316:	00ad      	lsls	r5, r5, #2
 8000318:	595e      	ldr	r6, [r3, r5]
 800031a:	43a6      	bics	r6, r4
 800031c:	4331      	orrs	r1, r6
 800031e:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000320:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	2403      	movs	r4, #3
 8000324:	230f      	movs	r3, #15
 8000326:	b2c0      	uxtb	r0, r0
 8000328:	4003      	ands	r3, r0
 800032a:	4020      	ands	r0, r4
 800032c:	40a0      	lsls	r0, r4
 800032e:	34fc      	adds	r4, #252	; 0xfc
 8000330:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000332:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000334:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000336:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000338:	3b08      	subs	r3, #8
 800033a:	4a05      	ldr	r2, [pc, #20]	; (8000350 <HAL_NVIC_SetPriority+0x5c>)
 800033c:	089b      	lsrs	r3, r3, #2
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	189b      	adds	r3, r3, r2
 8000342:	69da      	ldr	r2, [r3, #28]
 8000344:	43aa      	bics	r2, r5
 8000346:	4311      	orrs	r1, r2
 8000348:	61d9      	str	r1, [r3, #28]
 800034a:	e7e9      	b.n	8000320 <HAL_NVIC_SetPriority+0x2c>
 800034c:	e000e100 	.word	0xe000e100
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000354:	2800      	cmp	r0, #0
 8000356:	db05      	blt.n	8000364 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000358:	231f      	movs	r3, #31
 800035a:	4018      	ands	r0, r3
 800035c:	3b1e      	subs	r3, #30
 800035e:	4083      	lsls	r3, r0
 8000360:	4a01      	ldr	r2, [pc, #4]	; (8000368 <HAL_NVIC_EnableIRQ+0x14>)
 8000362:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000364:	4770      	bx	lr
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	e000e100 	.word	0xe000e100

0800036c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	4a09      	ldr	r2, [pc, #36]	; (8000394 <HAL_SYSTICK_Config+0x28>)
 800036e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000370:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000372:	4293      	cmp	r3, r2
 8000374:	d80d      	bhi.n	8000392 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000376:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000378:	4a07      	ldr	r2, [pc, #28]	; (8000398 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800037a:	4808      	ldr	r0, [pc, #32]	; (800039c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800037e:	6a03      	ldr	r3, [r0, #32]
 8000380:	0609      	lsls	r1, r1, #24
 8000382:	021b      	lsls	r3, r3, #8
 8000384:	0a1b      	lsrs	r3, r3, #8
 8000386:	430b      	orrs	r3, r1
 8000388:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800038c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000390:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000392:	4770      	bx	lr
 8000394:	00ffffff 	.word	0x00ffffff
 8000398:	e000e010 	.word	0xe000e010
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80003a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003a2:	680b      	ldr	r3, [r1, #0]
{ 
 80003a4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003a6:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 80003a8:	2300      	movs	r3, #0
{ 
 80003aa:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003ac:	9a02      	ldr	r2, [sp, #8]
 80003ae:	40da      	lsrs	r2, r3
 80003b0:	d101      	bne.n	80003b6 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 80003b2:	b007      	add	sp, #28
 80003b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80003b6:	2201      	movs	r2, #1
 80003b8:	409a      	lsls	r2, r3
 80003ba:	9203      	str	r2, [sp, #12]
 80003bc:	9903      	ldr	r1, [sp, #12]
 80003be:	9a02      	ldr	r2, [sp, #8]
 80003c0:	400a      	ands	r2, r1
 80003c2:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 80003c4:	d100      	bne.n	80003c8 <HAL_GPIO_Init+0x28>
 80003c6:	e08c      	b.n	80004e2 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003c8:	9a01      	ldr	r2, [sp, #4]
 80003ca:	2110      	movs	r1, #16
 80003cc:	6852      	ldr	r2, [r2, #4]
 80003ce:	0016      	movs	r6, r2
 80003d0:	438e      	bics	r6, r1
 80003d2:	2e02      	cmp	r6, #2
 80003d4:	d10e      	bne.n	80003f4 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80003d6:	2507      	movs	r5, #7
 80003d8:	401d      	ands	r5, r3
 80003da:	00ad      	lsls	r5, r5, #2
 80003dc:	3901      	subs	r1, #1
 80003de:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 80003e0:	08dc      	lsrs	r4, r3, #3
 80003e2:	00a4      	lsls	r4, r4, #2
 80003e4:	1904      	adds	r4, r0, r4
 80003e6:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80003e8:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	6909      	ldr	r1, [r1, #16]
 80003ee:	40a9      	lsls	r1, r5
 80003f0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 80003f2:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80003f4:	2403      	movs	r4, #3
 80003f6:	005f      	lsls	r7, r3, #1
 80003f8:	40bc      	lsls	r4, r7
 80003fa:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003fc:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003fe:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000400:	4025      	ands	r5, r4
 8000402:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000404:	2503      	movs	r5, #3
 8000406:	4015      	ands	r5, r2
 8000408:	40bd      	lsls	r5, r7
 800040a:	4661      	mov	r1, ip
 800040c:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800040e:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000410:	2e01      	cmp	r6, #1
 8000412:	d80f      	bhi.n	8000434 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000414:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8000416:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000418:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800041a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800041c:	40bd      	lsls	r5, r7
 800041e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000420:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000422:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000424:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000426:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000428:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800042a:	2101      	movs	r1, #1
 800042c:	400d      	ands	r5, r1
 800042e:	409d      	lsls	r5, r3
 8000430:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000432:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000434:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000436:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000438:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800043a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800043c:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800043e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000440:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000442:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000444:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000446:	420a      	tst	r2, r1
 8000448:	d04b      	beq.n	80004e2 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	2101      	movs	r1, #1
 800044c:	4c26      	ldr	r4, [pc, #152]	; (80004e8 <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800044e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000450:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000452:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000454:	430d      	orrs	r5, r1
 8000456:	61a5      	str	r5, [r4, #24]
 8000458:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 800045a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045c:	400c      	ands	r4, r1
 800045e:	9405      	str	r4, [sp, #20]
 8000460:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000462:	240f      	movs	r4, #15
 8000464:	4921      	ldr	r1, [pc, #132]	; (80004ec <HAL_GPIO_Init+0x14c>)
 8000466:	00ad      	lsls	r5, r5, #2
 8000468:	00b6      	lsls	r6, r6, #2
 800046a:	186d      	adds	r5, r5, r1
 800046c:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800046e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8000470:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000472:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000474:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000476:	2400      	movs	r4, #0
 8000478:	4288      	cmp	r0, r1
 800047a:	d00c      	beq.n	8000496 <HAL_GPIO_Init+0xf6>
 800047c:	491c      	ldr	r1, [pc, #112]	; (80004f0 <HAL_GPIO_Init+0x150>)
 800047e:	3401      	adds	r4, #1
 8000480:	4288      	cmp	r0, r1
 8000482:	d008      	beq.n	8000496 <HAL_GPIO_Init+0xf6>
 8000484:	491b      	ldr	r1, [pc, #108]	; (80004f4 <HAL_GPIO_Init+0x154>)
 8000486:	3401      	adds	r4, #1
 8000488:	4288      	cmp	r0, r1
 800048a:	d004      	beq.n	8000496 <HAL_GPIO_Init+0xf6>
 800048c:	491a      	ldr	r1, [pc, #104]	; (80004f8 <HAL_GPIO_Init+0x158>)
 800048e:	3403      	adds	r4, #3
 8000490:	4288      	cmp	r0, r1
 8000492:	d100      	bne.n	8000496 <HAL_GPIO_Init+0xf6>
 8000494:	3c02      	subs	r4, #2
 8000496:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8000498:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800049a:	433c      	orrs	r4, r7
          temp |= iocurrent;
 800049c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 800049e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80004a0:	4c16      	ldr	r4, [pc, #88]	; (80004fc <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 80004a2:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80004a4:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 80004a6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004a8:	03d1      	lsls	r1, r2, #15
 80004aa:	d401      	bmi.n	80004b0 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 80004ac:	003e      	movs	r6, r7
 80004ae:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80004b0:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80004b2:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 80004b4:	9e00      	ldr	r6, [sp, #0]
 80004b6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004b8:	0391      	lsls	r1, r2, #14
 80004ba:	d401      	bmi.n	80004c0 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 80004bc:	003e      	movs	r6, r7
 80004be:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80004c0:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80004c2:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 80004c4:	9e00      	ldr	r6, [sp, #0]
 80004c6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004c8:	02d1      	lsls	r1, r2, #11
 80004ca:	d401      	bmi.n	80004d0 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 80004cc:	003e      	movs	r6, r7
 80004ce:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80004d0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80004d2:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 80004d4:	9f00      	ldr	r7, [sp, #0]
 80004d6:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004d8:	0292      	lsls	r2, r2, #10
 80004da:	d401      	bmi.n	80004e0 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 80004dc:	402e      	ands	r6, r5
 80004de:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80004e0:	60e7      	str	r7, [r4, #12]
    position++;
 80004e2:	3301      	adds	r3, #1
 80004e4:	e762      	b.n	80003ac <HAL_GPIO_Init+0xc>
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010000 	.word	0x40010000
 80004f0:	48000400 	.word	0x48000400
 80004f4:	48000800 	.word	0x48000800
 80004f8:	48000c00 	.word	0x48000c00
 80004fc:	40010400 	.word	0x40010400

08000500 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000500:	6900      	ldr	r0, [r0, #16]
 8000502:	4008      	ands	r0, r1
 8000504:	1e41      	subs	r1, r0, #1
 8000506:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000508:	b2c0      	uxtb	r0, r0
  }
 800050a:	4770      	bx	lr

0800050c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800050c:	2a00      	cmp	r2, #0
 800050e:	d001      	beq.n	8000514 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000510:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000512:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000514:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000516:	e7fc      	b.n	8000512 <HAL_GPIO_WritePin+0x6>

08000518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051a:	0004      	movs	r4, r0
 800051c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800051e:	2800      	cmp	r0, #0
 8000520:	d102      	bne.n	8000528 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000522:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000524:	b005      	add	sp, #20
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000528:	6803      	ldr	r3, [r0, #0]
 800052a:	07db      	lsls	r3, r3, #31
 800052c:	d42e      	bmi.n	800058c <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	079b      	lsls	r3, r3, #30
 8000532:	d47e      	bmi.n	8000632 <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000534:	6823      	ldr	r3, [r4, #0]
 8000536:	071b      	lsls	r3, r3, #28
 8000538:	d500      	bpl.n	800053c <HAL_RCC_OscConfig+0x24>
 800053a:	e0ba      	b.n	80006b2 <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800053c:	6823      	ldr	r3, [r4, #0]
 800053e:	075b      	lsls	r3, r3, #29
 8000540:	d500      	bpl.n	8000544 <HAL_RCC_OscConfig+0x2c>
 8000542:	e0dd      	b.n	8000700 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000544:	6823      	ldr	r3, [r4, #0]
 8000546:	06db      	lsls	r3, r3, #27
 8000548:	d51a      	bpl.n	8000580 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800054a:	6962      	ldr	r2, [r4, #20]
 800054c:	4db4      	ldr	r5, [pc, #720]	; (8000820 <HAL_RCC_OscConfig+0x308>)
 800054e:	2304      	movs	r3, #4
 8000550:	2a01      	cmp	r2, #1
 8000552:	d000      	beq.n	8000556 <HAL_RCC_OscConfig+0x3e>
 8000554:	e149      	b.n	80007ea <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000556:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000558:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800055a:	430b      	orrs	r3, r1
 800055c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800055e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000560:	431a      	orrs	r2, r3
 8000562:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000564:	f7ff feae 	bl	80002c4 <HAL_GetTick>
 8000568:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800056a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800056c:	4233      	tst	r3, r6
 800056e:	d100      	bne.n	8000572 <HAL_RCC_OscConfig+0x5a>
 8000570:	e134      	b.n	80007dc <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000572:	21f8      	movs	r1, #248	; 0xf8
 8000574:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000576:	69a3      	ldr	r3, [r4, #24]
 8000578:	438a      	bics	r2, r1
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	4313      	orrs	r3, r2
 800057e:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000580:	6a23      	ldr	r3, [r4, #32]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d000      	beq.n	8000588 <HAL_RCC_OscConfig+0x70>
 8000586:	e157      	b.n	8000838 <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8000588:	2000      	movs	r0, #0
 800058a:	e7cb      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800058c:	210c      	movs	r1, #12
 800058e:	4da4      	ldr	r5, [pc, #656]	; (8000820 <HAL_RCC_OscConfig+0x308>)
 8000590:	686a      	ldr	r2, [r5, #4]
 8000592:	400a      	ands	r2, r1
 8000594:	2a04      	cmp	r2, #4
 8000596:	d006      	beq.n	80005a6 <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000598:	686b      	ldr	r3, [r5, #4]
 800059a:	400b      	ands	r3, r1
 800059c:	2b08      	cmp	r3, #8
 800059e:	d109      	bne.n	80005b4 <HAL_RCC_OscConfig+0x9c>
 80005a0:	686b      	ldr	r3, [r5, #4]
 80005a2:	03db      	lsls	r3, r3, #15
 80005a4:	d506      	bpl.n	80005b4 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005a6:	682b      	ldr	r3, [r5, #0]
 80005a8:	039b      	lsls	r3, r3, #14
 80005aa:	d5c0      	bpl.n	800052e <HAL_RCC_OscConfig+0x16>
 80005ac:	6863      	ldr	r3, [r4, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1bd      	bne.n	800052e <HAL_RCC_OscConfig+0x16>
 80005b2:	e7b6      	b.n	8000522 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b4:	6863      	ldr	r3, [r4, #4]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d113      	bne.n	80005e2 <HAL_RCC_OscConfig+0xca>
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	682a      	ldr	r2, [r5, #0]
 80005be:	025b      	lsls	r3, r3, #9
 80005c0:	4313      	orrs	r3, r2
 80005c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80005c4:	f7ff fe7e 	bl	80002c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005c8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80005ca:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005cc:	02b6      	lsls	r6, r6, #10
 80005ce:	682b      	ldr	r3, [r5, #0]
 80005d0:	4233      	tst	r3, r6
 80005d2:	d1ac      	bne.n	800052e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005d4:	f7ff fe76 	bl	80002c4 <HAL_GetTick>
 80005d8:	1bc0      	subs	r0, r0, r7
 80005da:	2864      	cmp	r0, #100	; 0x64
 80005dc:	d9f7      	bls.n	80005ce <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 80005de:	2003      	movs	r0, #3
 80005e0:	e7a0      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d115      	bne.n	8000612 <HAL_RCC_OscConfig+0xfa>
 80005e6:	682b      	ldr	r3, [r5, #0]
 80005e8:	4a8e      	ldr	r2, [pc, #568]	; (8000824 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ea:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ec:	4013      	ands	r3, r2
 80005ee:	602b      	str	r3, [r5, #0]
 80005f0:	682b      	ldr	r3, [r5, #0]
 80005f2:	4a8d      	ldr	r2, [pc, #564]	; (8000828 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005f4:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005f6:	4013      	ands	r3, r2
 80005f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80005fa:	f7ff fe63 	bl	80002c4 <HAL_GetTick>
 80005fe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000600:	682b      	ldr	r3, [r5, #0]
 8000602:	4233      	tst	r3, r6
 8000604:	d093      	beq.n	800052e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000606:	f7ff fe5d 	bl	80002c4 <HAL_GetTick>
 800060a:	1bc0      	subs	r0, r0, r7
 800060c:	2864      	cmp	r0, #100	; 0x64
 800060e:	d9f7      	bls.n	8000600 <HAL_RCC_OscConfig+0xe8>
 8000610:	e7e5      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000612:	2b05      	cmp	r3, #5
 8000614:	d105      	bne.n	8000622 <HAL_RCC_OscConfig+0x10a>
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	682a      	ldr	r2, [r5, #0]
 800061a:	02db      	lsls	r3, r3, #11
 800061c:	4313      	orrs	r3, r2
 800061e:	602b      	str	r3, [r5, #0]
 8000620:	e7cb      	b.n	80005ba <HAL_RCC_OscConfig+0xa2>
 8000622:	682b      	ldr	r3, [r5, #0]
 8000624:	4a7f      	ldr	r2, [pc, #508]	; (8000824 <HAL_RCC_OscConfig+0x30c>)
 8000626:	4013      	ands	r3, r2
 8000628:	602b      	str	r3, [r5, #0]
 800062a:	682b      	ldr	r3, [r5, #0]
 800062c:	4a7e      	ldr	r2, [pc, #504]	; (8000828 <HAL_RCC_OscConfig+0x310>)
 800062e:	4013      	ands	r3, r2
 8000630:	e7c7      	b.n	80005c2 <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000632:	220c      	movs	r2, #12
 8000634:	4d7a      	ldr	r5, [pc, #488]	; (8000820 <HAL_RCC_OscConfig+0x308>)
 8000636:	686b      	ldr	r3, [r5, #4]
 8000638:	4213      	tst	r3, r2
 800063a:	d006      	beq.n	800064a <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800063c:	686b      	ldr	r3, [r5, #4]
 800063e:	4013      	ands	r3, r2
 8000640:	2b08      	cmp	r3, #8
 8000642:	d111      	bne.n	8000668 <HAL_RCC_OscConfig+0x150>
 8000644:	686b      	ldr	r3, [r5, #4]
 8000646:	03db      	lsls	r3, r3, #15
 8000648:	d40e      	bmi.n	8000668 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800064a:	682b      	ldr	r3, [r5, #0]
 800064c:	079b      	lsls	r3, r3, #30
 800064e:	d503      	bpl.n	8000658 <HAL_RCC_OscConfig+0x140>
 8000650:	68e3      	ldr	r3, [r4, #12]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d000      	beq.n	8000658 <HAL_RCC_OscConfig+0x140>
 8000656:	e764      	b.n	8000522 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000658:	21f8      	movs	r1, #248	; 0xf8
 800065a:	682a      	ldr	r2, [r5, #0]
 800065c:	6923      	ldr	r3, [r4, #16]
 800065e:	438a      	bics	r2, r1
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	4313      	orrs	r3, r2
 8000664:	602b      	str	r3, [r5, #0]
 8000666:	e765      	b.n	8000534 <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000668:	68e2      	ldr	r2, [r4, #12]
 800066a:	2301      	movs	r3, #1
 800066c:	2a00      	cmp	r2, #0
 800066e:	d00f      	beq.n	8000690 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8000670:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000672:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000674:	4313      	orrs	r3, r2
 8000676:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000678:	f7ff fe24 	bl	80002c4 <HAL_GetTick>
 800067c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800067e:	682b      	ldr	r3, [r5, #0]
 8000680:	4233      	tst	r3, r6
 8000682:	d1e9      	bne.n	8000658 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000684:	f7ff fe1e 	bl	80002c4 <HAL_GetTick>
 8000688:	1bc0      	subs	r0, r0, r7
 800068a:	2802      	cmp	r0, #2
 800068c:	d9f7      	bls.n	800067e <HAL_RCC_OscConfig+0x166>
 800068e:	e7a6      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8000690:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000692:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000694:	439a      	bics	r2, r3
 8000696:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000698:	f7ff fe14 	bl	80002c4 <HAL_GetTick>
 800069c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800069e:	682b      	ldr	r3, [r5, #0]
 80006a0:	4233      	tst	r3, r6
 80006a2:	d100      	bne.n	80006a6 <HAL_RCC_OscConfig+0x18e>
 80006a4:	e746      	b.n	8000534 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006a6:	f7ff fe0d 	bl	80002c4 <HAL_GetTick>
 80006aa:	1bc0      	subs	r0, r0, r7
 80006ac:	2802      	cmp	r0, #2
 80006ae:	d9f6      	bls.n	800069e <HAL_RCC_OscConfig+0x186>
 80006b0:	e795      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006b2:	69e2      	ldr	r2, [r4, #28]
 80006b4:	2301      	movs	r3, #1
 80006b6:	4d5a      	ldr	r5, [pc, #360]	; (8000820 <HAL_RCC_OscConfig+0x308>)
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	d010      	beq.n	80006de <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 80006bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006be:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80006c0:	4313      	orrs	r3, r2
 80006c2:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80006c4:	f7ff fdfe 	bl	80002c4 <HAL_GetTick>
 80006c8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80006cc:	4233      	tst	r3, r6
 80006ce:	d000      	beq.n	80006d2 <HAL_RCC_OscConfig+0x1ba>
 80006d0:	e734      	b.n	800053c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006d2:	f7ff fdf7 	bl	80002c4 <HAL_GetTick>
 80006d6:	1bc0      	subs	r0, r0, r7
 80006d8:	2802      	cmp	r0, #2
 80006da:	d9f6      	bls.n	80006ca <HAL_RCC_OscConfig+0x1b2>
 80006dc:	e77f      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 80006de:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006e0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80006e2:	439a      	bics	r2, r3
 80006e4:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80006e6:	f7ff fded 	bl	80002c4 <HAL_GetTick>
 80006ea:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80006ee:	4233      	tst	r3, r6
 80006f0:	d100      	bne.n	80006f4 <HAL_RCC_OscConfig+0x1dc>
 80006f2:	e723      	b.n	800053c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006f4:	f7ff fde6 	bl	80002c4 <HAL_GetTick>
 80006f8:	1bc0      	subs	r0, r0, r7
 80006fa:	2802      	cmp	r0, #2
 80006fc:	d9f6      	bls.n	80006ec <HAL_RCC_OscConfig+0x1d4>
 80006fe:	e76e      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000700:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000702:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000704:	4d46      	ldr	r5, [pc, #280]	; (8000820 <HAL_RCC_OscConfig+0x308>)
 8000706:	0552      	lsls	r2, r2, #21
 8000708:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 800070a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800070c:	4213      	tst	r3, r2
 800070e:	d108      	bne.n	8000722 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	69eb      	ldr	r3, [r5, #28]
 8000712:	4313      	orrs	r3, r2
 8000714:	61eb      	str	r3, [r5, #28]
 8000716:	69eb      	ldr	r3, [r5, #28]
 8000718:	4013      	ands	r3, r2
 800071a:	9303      	str	r3, [sp, #12]
 800071c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800071e:	2301      	movs	r3, #1
 8000720:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000722:	2780      	movs	r7, #128	; 0x80
 8000724:	4e41      	ldr	r6, [pc, #260]	; (800082c <HAL_RCC_OscConfig+0x314>)
 8000726:	007f      	lsls	r7, r7, #1
 8000728:	6833      	ldr	r3, [r6, #0]
 800072a:	423b      	tst	r3, r7
 800072c:	d006      	beq.n	800073c <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800072e:	68a3      	ldr	r3, [r4, #8]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d113      	bne.n	800075c <HAL_RCC_OscConfig+0x244>
 8000734:	6a2a      	ldr	r2, [r5, #32]
 8000736:	4313      	orrs	r3, r2
 8000738:	622b      	str	r3, [r5, #32]
 800073a:	e030      	b.n	800079e <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800073c:	6833      	ldr	r3, [r6, #0]
 800073e:	433b      	orrs	r3, r7
 8000740:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000742:	f7ff fdbf 	bl	80002c4 <HAL_GetTick>
 8000746:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000748:	6833      	ldr	r3, [r6, #0]
 800074a:	423b      	tst	r3, r7
 800074c:	d1ef      	bne.n	800072e <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800074e:	f7ff fdb9 	bl	80002c4 <HAL_GetTick>
 8000752:	9b01      	ldr	r3, [sp, #4]
 8000754:	1ac0      	subs	r0, r0, r3
 8000756:	2864      	cmp	r0, #100	; 0x64
 8000758:	d9f6      	bls.n	8000748 <HAL_RCC_OscConfig+0x230>
 800075a:	e740      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
 800075c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800075e:	2b00      	cmp	r3, #0
 8000760:	d114      	bne.n	800078c <HAL_RCC_OscConfig+0x274>
 8000762:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000764:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000766:	4393      	bics	r3, r2
 8000768:	622b      	str	r3, [r5, #32]
 800076a:	6a2b      	ldr	r3, [r5, #32]
 800076c:	3203      	adds	r2, #3
 800076e:	4393      	bics	r3, r2
 8000770:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000772:	f7ff fda7 	bl	80002c4 <HAL_GetTick>
 8000776:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000778:	6a2b      	ldr	r3, [r5, #32]
 800077a:	423b      	tst	r3, r7
 800077c:	d025      	beq.n	80007ca <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800077e:	f7ff fda1 	bl	80002c4 <HAL_GetTick>
 8000782:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <HAL_RCC_OscConfig+0x318>)
 8000784:	1b80      	subs	r0, r0, r6
 8000786:	4298      	cmp	r0, r3
 8000788:	d9f6      	bls.n	8000778 <HAL_RCC_OscConfig+0x260>
 800078a:	e728      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800078c:	2b05      	cmp	r3, #5
 800078e:	d10b      	bne.n	80007a8 <HAL_RCC_OscConfig+0x290>
 8000790:	6a29      	ldr	r1, [r5, #32]
 8000792:	3b01      	subs	r3, #1
 8000794:	430b      	orrs	r3, r1
 8000796:	622b      	str	r3, [r5, #32]
 8000798:	6a2b      	ldr	r3, [r5, #32]
 800079a:	431a      	orrs	r2, r3
 800079c:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 800079e:	f7ff fd91 	bl	80002c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007a2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80007a4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007a6:	e00d      	b.n	80007c4 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a8:	6a2b      	ldr	r3, [r5, #32]
 80007aa:	4393      	bics	r3, r2
 80007ac:	2204      	movs	r2, #4
 80007ae:	622b      	str	r3, [r5, #32]
 80007b0:	6a2b      	ldr	r3, [r5, #32]
 80007b2:	4393      	bics	r3, r2
 80007b4:	e7c0      	b.n	8000738 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007b6:	f7ff fd85 	bl	80002c4 <HAL_GetTick>
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <HAL_RCC_OscConfig+0x318>)
 80007bc:	1b80      	subs	r0, r0, r6
 80007be:	4298      	cmp	r0, r3
 80007c0:	d900      	bls.n	80007c4 <HAL_RCC_OscConfig+0x2ac>
 80007c2:	e70c      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007c4:	6a2b      	ldr	r3, [r5, #32]
 80007c6:	423b      	tst	r3, r7
 80007c8:	d0f5      	beq.n	80007b6 <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 80007ca:	9b00      	ldr	r3, [sp, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d000      	beq.n	80007d2 <HAL_RCC_OscConfig+0x2ba>
 80007d0:	e6b8      	b.n	8000544 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007d2:	69eb      	ldr	r3, [r5, #28]
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <HAL_RCC_OscConfig+0x31c>)
 80007d6:	4013      	ands	r3, r2
 80007d8:	61eb      	str	r3, [r5, #28]
 80007da:	e6b3      	b.n	8000544 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007dc:	f7ff fd72 	bl	80002c4 <HAL_GetTick>
 80007e0:	1bc0      	subs	r0, r0, r7
 80007e2:	2802      	cmp	r0, #2
 80007e4:	d800      	bhi.n	80007e8 <HAL_RCC_OscConfig+0x2d0>
 80007e6:	e6c0      	b.n	800056a <HAL_RCC_OscConfig+0x52>
 80007e8:	e6f9      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80007ea:	3205      	adds	r2, #5
 80007ec:	d103      	bne.n	80007f6 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 80007ee:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80007f0:	439a      	bics	r2, r3
 80007f2:	636a      	str	r2, [r5, #52]	; 0x34
 80007f4:	e6bd      	b.n	8000572 <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 80007f6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007f8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80007fa:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80007fc:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80007fe:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000800:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000802:	4393      	bics	r3, r2
 8000804:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000806:	f7ff fd5d 	bl	80002c4 <HAL_GetTick>
 800080a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800080c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800080e:	4233      	tst	r3, r6
 8000810:	d100      	bne.n	8000814 <HAL_RCC_OscConfig+0x2fc>
 8000812:	e6b5      	b.n	8000580 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000814:	f7ff fd56 	bl	80002c4 <HAL_GetTick>
 8000818:	1bc0      	subs	r0, r0, r7
 800081a:	2802      	cmp	r0, #2
 800081c:	d9f6      	bls.n	800080c <HAL_RCC_OscConfig+0x2f4>
 800081e:	e6de      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
 8000820:	40021000 	.word	0x40021000
 8000824:	fffeffff 	.word	0xfffeffff
 8000828:	fffbffff 	.word	0xfffbffff
 800082c:	40007000 	.word	0x40007000
 8000830:	00001388 	.word	0x00001388
 8000834:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000838:	200c      	movs	r0, #12
 800083a:	4a35      	ldr	r2, [pc, #212]	; (8000910 <HAL_RCC_OscConfig+0x3f8>)
 800083c:	6851      	ldr	r1, [r2, #4]
 800083e:	0015      	movs	r5, r2
 8000840:	4001      	ands	r1, r0
 8000842:	2908      	cmp	r1, #8
 8000844:	d047      	beq.n	80008d6 <HAL_RCC_OscConfig+0x3be>
 8000846:	4a33      	ldr	r2, [pc, #204]	; (8000914 <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000848:	2b02      	cmp	r3, #2
 800084a:	d132      	bne.n	80008b2 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 800084c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800084e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000850:	4013      	ands	r3, r2
 8000852:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000854:	f7ff fd36 	bl	80002c4 <HAL_GetTick>
 8000858:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800085a:	04b6      	lsls	r6, r6, #18
 800085c:	682b      	ldr	r3, [r5, #0]
 800085e:	4233      	tst	r3, r6
 8000860:	d121      	bne.n	80008a6 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000862:	220f      	movs	r2, #15
 8000864:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000866:	4393      	bics	r3, r2
 8000868:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800086a:	4313      	orrs	r3, r2
 800086c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800086e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000870:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000872:	686a      	ldr	r2, [r5, #4]
 8000874:	430b      	orrs	r3, r1
 8000876:	4928      	ldr	r1, [pc, #160]	; (8000918 <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000878:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800087a:	400a      	ands	r2, r1
 800087c:	4313      	orrs	r3, r2
 800087e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	682a      	ldr	r2, [r5, #0]
 8000884:	045b      	lsls	r3, r3, #17
 8000886:	4313      	orrs	r3, r2
 8000888:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800088a:	f7ff fd1b 	bl	80002c4 <HAL_GetTick>
 800088e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000890:	04a4      	lsls	r4, r4, #18
 8000892:	682b      	ldr	r3, [r5, #0]
 8000894:	4223      	tst	r3, r4
 8000896:	d000      	beq.n	800089a <HAL_RCC_OscConfig+0x382>
 8000898:	e676      	b.n	8000588 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800089a:	f7ff fd13 	bl	80002c4 <HAL_GetTick>
 800089e:	1b80      	subs	r0, r0, r6
 80008a0:	2802      	cmp	r0, #2
 80008a2:	d9f6      	bls.n	8000892 <HAL_RCC_OscConfig+0x37a>
 80008a4:	e69b      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008a6:	f7ff fd0d 	bl	80002c4 <HAL_GetTick>
 80008aa:	1bc0      	subs	r0, r0, r7
 80008ac:	2802      	cmp	r0, #2
 80008ae:	d9d5      	bls.n	800085c <HAL_RCC_OscConfig+0x344>
 80008b0:	e695      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 80008b2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008b4:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80008b6:	4013      	ands	r3, r2
 80008b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008ba:	f7ff fd03 	bl	80002c4 <HAL_GetTick>
 80008be:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008c0:	04a4      	lsls	r4, r4, #18
 80008c2:	682b      	ldr	r3, [r5, #0]
 80008c4:	4223      	tst	r3, r4
 80008c6:	d100      	bne.n	80008ca <HAL_RCC_OscConfig+0x3b2>
 80008c8:	e65e      	b.n	8000588 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ca:	f7ff fcfb 	bl	80002c4 <HAL_GetTick>
 80008ce:	1b80      	subs	r0, r0, r6
 80008d0:	2802      	cmp	r0, #2
 80008d2:	d9f6      	bls.n	80008c2 <HAL_RCC_OscConfig+0x3aa>
 80008d4:	e683      	b.n	80005de <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 80008d6:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d100      	bne.n	80008de <HAL_RCC_OscConfig+0x3c6>
 80008dc:	e622      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80008de:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 80008e0:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80008e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80008e4:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 80008e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80008e8:	4019      	ands	r1, r3
        return HAL_ERROR;
 80008ea:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80008ec:	42a9      	cmp	r1, r5
 80008ee:	d000      	beq.n	80008f2 <HAL_RCC_OscConfig+0x3da>
 80008f0:	e618      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80008f2:	210f      	movs	r1, #15
 80008f4:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80008f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80008f8:	428a      	cmp	r2, r1
 80008fa:	d000      	beq.n	80008fe <HAL_RCC_OscConfig+0x3e6>
 80008fc:	e612      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80008fe:	20f0      	movs	r0, #240	; 0xf0
 8000900:	0380      	lsls	r0, r0, #14
 8000902:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000904:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000906:	1a1b      	subs	r3, r3, r0
 8000908:	1e58      	subs	r0, r3, #1
 800090a:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 800090c:	b2d8      	uxtb	r0, r3
 800090e:	e609      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
 8000910:	40021000 	.word	0x40021000
 8000914:	feffffff 	.word	0xfeffffff
 8000918:	ffc2ffff 	.word	0xffc2ffff

0800091c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800091c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800091e:	4c14      	ldr	r4, [pc, #80]	; (8000970 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000920:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000922:	2210      	movs	r2, #16
 8000924:	0021      	movs	r1, r4
 8000926:	4668      	mov	r0, sp
 8000928:	f001 fa36 	bl	8001d98 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800092c:	0021      	movs	r1, r4
 800092e:	ad04      	add	r5, sp, #16
 8000930:	2210      	movs	r2, #16
 8000932:	3110      	adds	r1, #16
 8000934:	0028      	movs	r0, r5
 8000936:	f001 fa2f 	bl	8001d98 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800093a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800093c:	4e0d      	ldr	r6, [pc, #52]	; (8000974 <HAL_RCC_GetSysClockFreq+0x58>)
 800093e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000940:	401a      	ands	r2, r3
 8000942:	2a08      	cmp	r2, #8
 8000944:	d111      	bne.n	800096a <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000946:	200f      	movs	r0, #15
 8000948:	466a      	mov	r2, sp
 800094a:	0c99      	lsrs	r1, r3, #18
 800094c:	4001      	ands	r1, r0
 800094e:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000950:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000952:	4002      	ands	r2, r0
 8000954:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000956:	03db      	lsls	r3, r3, #15
 8000958:	d505      	bpl.n	8000966 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800095a:	4807      	ldr	r0, [pc, #28]	; (8000978 <HAL_RCC_GetSysClockFreq+0x5c>)
 800095c:	f7ff fbe6 	bl	800012c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000960:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000962:	b008      	add	sp, #32
 8000964:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <HAL_RCC_GetSysClockFreq+0x60>)
 8000968:	e7fa      	b.n	8000960 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 800096c:	e7f9      	b.n	8000962 <HAL_RCC_GetSysClockFreq+0x46>
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	08001e60 	.word	0x08001e60
 8000974:	40021000 	.word	0x40021000
 8000978:	007a1200 	.word	0x007a1200
 800097c:	003d0900 	.word	0x003d0900

08000980 <HAL_RCC_ClockConfig>:
{
 8000980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000982:	0005      	movs	r5, r0
 8000984:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8000986:	2800      	cmp	r0, #0
 8000988:	d101      	bne.n	800098e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800098a:	2001      	movs	r0, #1
}
 800098c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800098e:	2201      	movs	r2, #1
 8000990:	4c37      	ldr	r4, [pc, #220]	; (8000a70 <HAL_RCC_ClockConfig+0xf0>)
 8000992:	6823      	ldr	r3, [r4, #0]
 8000994:	4013      	ands	r3, r2
 8000996:	428b      	cmp	r3, r1
 8000998:	d31c      	bcc.n	80009d4 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800099a:	6829      	ldr	r1, [r5, #0]
 800099c:	078b      	lsls	r3, r1, #30
 800099e:	d422      	bmi.n	80009e6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009a0:	07cb      	lsls	r3, r1, #31
 80009a2:	d42f      	bmi.n	8000a04 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80009a4:	2301      	movs	r3, #1
 80009a6:	6822      	ldr	r2, [r4, #0]
 80009a8:	401a      	ands	r2, r3
 80009aa:	4297      	cmp	r7, r2
 80009ac:	d351      	bcc.n	8000a52 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009ae:	682b      	ldr	r3, [r5, #0]
 80009b0:	4c30      	ldr	r4, [pc, #192]	; (8000a74 <HAL_RCC_ClockConfig+0xf4>)
 80009b2:	075b      	lsls	r3, r3, #29
 80009b4:	d454      	bmi.n	8000a60 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80009b6:	f7ff ffb1 	bl	800091c <HAL_RCC_GetSysClockFreq>
 80009ba:	6863      	ldr	r3, [r4, #4]
 80009bc:	4a2e      	ldr	r2, [pc, #184]	; (8000a78 <HAL_RCC_ClockConfig+0xf8>)
 80009be:	061b      	lsls	r3, r3, #24
 80009c0:	0f1b      	lsrs	r3, r3, #28
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	40d8      	lsrs	r0, r3
 80009c6:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <HAL_RCC_ClockConfig+0xfc>)
 80009c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff fc3a 	bl	8000244 <HAL_InitTick>
  return HAL_OK;
 80009d0:	2000      	movs	r0, #0
 80009d2:	e7db      	b.n	800098c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	4393      	bics	r3, r2
 80009d8:	430b      	orrs	r3, r1
 80009da:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	4013      	ands	r3, r2
 80009e0:	4299      	cmp	r1, r3
 80009e2:	d1d2      	bne.n	800098a <HAL_RCC_ClockConfig+0xa>
 80009e4:	e7d9      	b.n	800099a <HAL_RCC_ClockConfig+0x1a>
 80009e6:	4a23      	ldr	r2, [pc, #140]	; (8000a74 <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009e8:	074b      	lsls	r3, r1, #29
 80009ea:	d504      	bpl.n	80009f6 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80009ec:	23e0      	movs	r3, #224	; 0xe0
 80009ee:	6850      	ldr	r0, [r2, #4]
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	4303      	orrs	r3, r0
 80009f4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009f6:	20f0      	movs	r0, #240	; 0xf0
 80009f8:	6853      	ldr	r3, [r2, #4]
 80009fa:	4383      	bics	r3, r0
 80009fc:	68a8      	ldr	r0, [r5, #8]
 80009fe:	4303      	orrs	r3, r0
 8000a00:	6053      	str	r3, [r2, #4]
 8000a02:	e7cd      	b.n	80009a0 <HAL_RCC_ClockConfig+0x20>
 8000a04:	4e1b      	ldr	r6, [pc, #108]	; (8000a74 <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a06:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a08:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a0a:	2a01      	cmp	r2, #1
 8000a0c:	d119      	bne.n	8000a42 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a0e:	039b      	lsls	r3, r3, #14
 8000a10:	d5bb      	bpl.n	800098a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a12:	2103      	movs	r1, #3
 8000a14:	6873      	ldr	r3, [r6, #4]
 8000a16:	438b      	bics	r3, r1
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000a1c:	f7ff fc52 	bl	80002c4 <HAL_GetTick>
 8000a20:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a22:	230c      	movs	r3, #12
 8000a24:	6872      	ldr	r2, [r6, #4]
 8000a26:	401a      	ands	r2, r3
 8000a28:	686b      	ldr	r3, [r5, #4]
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d0b9      	beq.n	80009a4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a30:	f7ff fc48 	bl	80002c4 <HAL_GetTick>
 8000a34:	9b01      	ldr	r3, [sp, #4]
 8000a36:	1ac0      	subs	r0, r0, r3
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_RCC_ClockConfig+0x100>)
 8000a3a:	4298      	cmp	r0, r3
 8000a3c:	d9f1      	bls.n	8000a22 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8000a3e:	2003      	movs	r0, #3
 8000a40:	e7a4      	b.n	800098c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a42:	2a02      	cmp	r2, #2
 8000a44:	d102      	bne.n	8000a4c <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a46:	019b      	lsls	r3, r3, #6
 8000a48:	d4e3      	bmi.n	8000a12 <HAL_RCC_ClockConfig+0x92>
 8000a4a:	e79e      	b.n	800098a <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a4c:	079b      	lsls	r3, r3, #30
 8000a4e:	d4e0      	bmi.n	8000a12 <HAL_RCC_ClockConfig+0x92>
 8000a50:	e79b      	b.n	800098a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a52:	6822      	ldr	r2, [r4, #0]
 8000a54:	439a      	bics	r2, r3
 8000a56:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a58:	6822      	ldr	r2, [r4, #0]
 8000a5a:	421a      	tst	r2, r3
 8000a5c:	d195      	bne.n	800098a <HAL_RCC_ClockConfig+0xa>
 8000a5e:	e7a6      	b.n	80009ae <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000a60:	6863      	ldr	r3, [r4, #4]
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_RCC_ClockConfig+0x104>)
 8000a64:	4013      	ands	r3, r2
 8000a66:	68ea      	ldr	r2, [r5, #12]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	6063      	str	r3, [r4, #4]
 8000a6c:	e7a3      	b.n	80009b6 <HAL_RCC_ClockConfig+0x36>
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	40022000 	.word	0x40022000
 8000a74:	40021000 	.word	0x40021000
 8000a78:	08001f4e 	.word	0x08001f4e
 8000a7c:	20000010 	.word	0x20000010
 8000a80:	00001388 	.word	0x00001388
 8000a84:	fffff8ff 	.word	0xfffff8ff

08000a88 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	055b      	lsls	r3, r3, #21
 8000a90:	0f5b      	lsrs	r3, r3, #29
 8000a92:	5cd3      	ldrb	r3, [r2, r3]
 8000a94:	4a03      	ldr	r2, [pc, #12]	; (8000aa4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a96:	6810      	ldr	r0, [r2, #0]
 8000a98:	40d8      	lsrs	r0, r3
}    
 8000a9a:	4770      	bx	lr
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	08001f5e 	.word	0x08001f5e
 8000aa4:	20000010 	.word	0x20000010

08000aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000aa8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000aaa:	6803      	ldr	r3, [r0, #0]
{
 8000aac:	b085      	sub	sp, #20
 8000aae:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000ab0:	03db      	lsls	r3, r3, #15
 8000ab2:	d528      	bpl.n	8000b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ab4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ab6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ab8:	4c37      	ldr	r4, [pc, #220]	; (8000b98 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000aba:	0552      	lsls	r2, r2, #21
 8000abc:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000abe:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ac0:	4213      	tst	r3, r2
 8000ac2:	d108      	bne.n	8000ad6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ac4:	69e3      	ldr	r3, [r4, #28]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61e3      	str	r3, [r4, #28]
 8000aca:	69e3      	ldr	r3, [r4, #28]
 8000acc:	4013      	ands	r3, r2
 8000ace:	9303      	str	r3, [sp, #12]
 8000ad0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad6:	2780      	movs	r7, #128	; 0x80
 8000ad8:	4e30      	ldr	r6, [pc, #192]	; (8000b9c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000ada:	007f      	lsls	r7, r7, #1
 8000adc:	6833      	ldr	r3, [r6, #0]
 8000ade:	423b      	tst	r3, r7
 8000ae0:	d026      	beq.n	8000b30 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000ae2:	22c0      	movs	r2, #192	; 0xc0
 8000ae4:	6a23      	ldr	r3, [r4, #32]
 8000ae6:	0092      	lsls	r2, r2, #2
 8000ae8:	4013      	ands	r3, r2
 8000aea:	4e2d      	ldr	r6, [pc, #180]	; (8000ba0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000aec:	d132      	bne.n	8000b54 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000aee:	6a23      	ldr	r3, [r4, #32]
 8000af0:	401e      	ands	r6, r3
 8000af2:	686b      	ldr	r3, [r5, #4]
 8000af4:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000af6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000af8:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d103      	bne.n	8000b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000afe:	69e3      	ldr	r3, [r4, #28]
 8000b00:	4a28      	ldr	r2, [pc, #160]	; (8000ba4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000b06:	682a      	ldr	r2, [r5, #0]
 8000b08:	07d3      	lsls	r3, r2, #31
 8000b0a:	d506      	bpl.n	8000b1a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	4922      	ldr	r1, [pc, #136]	; (8000b98 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000b10:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000b12:	4383      	bics	r3, r0
 8000b14:	68a8      	ldr	r0, [r5, #8]
 8000b16:	4303      	orrs	r3, r0
 8000b18:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000b1a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000b1c:	0693      	lsls	r3, r2, #26
 8000b1e:	d517      	bpl.n	8000b50 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000b20:	2110      	movs	r1, #16
 8000b22:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000b24:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b26:	438b      	bics	r3, r1
 8000b28:	68e9      	ldr	r1, [r5, #12]
 8000b2a:	430b      	orrs	r3, r1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	e00f      	b.n	8000b50 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b30:	6833      	ldr	r3, [r6, #0]
 8000b32:	433b      	orrs	r3, r7
 8000b34:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b36:	f7ff fbc5 	bl	80002c4 <HAL_GetTick>
 8000b3a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b3c:	6833      	ldr	r3, [r6, #0]
 8000b3e:	423b      	tst	r3, r7
 8000b40:	d1cf      	bne.n	8000ae2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b42:	f7ff fbbf 	bl	80002c4 <HAL_GetTick>
 8000b46:	9b01      	ldr	r3, [sp, #4]
 8000b48:	1ac0      	subs	r0, r0, r3
 8000b4a:	2864      	cmp	r0, #100	; 0x64
 8000b4c:	d9f6      	bls.n	8000b3c <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000b4e:	2003      	movs	r0, #3
}
 8000b50:	b005      	add	sp, #20
 8000b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000b54:	6869      	ldr	r1, [r5, #4]
 8000b56:	400a      	ands	r2, r1
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d0c8      	beq.n	8000aee <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000b5c:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000b5e:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000b60:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000b62:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000b64:	025b      	lsls	r3, r3, #9
 8000b66:	4303      	orrs	r3, r0
 8000b68:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000b6a:	6a23      	ldr	r3, [r4, #32]
 8000b6c:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000b6e:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000b70:	4003      	ands	r3, r0
 8000b72:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000b74:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000b76:	07d3      	lsls	r3, r2, #31
 8000b78:	d5b9      	bpl.n	8000aee <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000b7a:	f7ff fba3 	bl	80002c4 <HAL_GetTick>
 8000b7e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b80:	2202      	movs	r2, #2
 8000b82:	6a23      	ldr	r3, [r4, #32]
 8000b84:	4213      	tst	r3, r2
 8000b86:	d1b2      	bne.n	8000aee <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b88:	f7ff fb9c 	bl	80002c4 <HAL_GetTick>
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000b8e:	1bc0      	subs	r0, r0, r7
 8000b90:	4298      	cmp	r0, r3
 8000b92:	d9f5      	bls.n	8000b80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000b94:	e7db      	b.n	8000b4e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40007000 	.word	0x40007000
 8000ba0:	fffffcff 	.word	0xfffffcff
 8000ba4:	efffffff 	.word	0xefffffff
 8000ba8:	fffeffff 	.word	0xfffeffff
 8000bac:	00001388 	.word	0x00001388

08000bb0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000bb4:	2007      	movs	r0, #7
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000bb6:	68d9      	ldr	r1, [r3, #12]
 8000bb8:	4311      	orrs	r1, r2
 8000bba:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000bbc:	6899      	ldr	r1, [r3, #8]
 8000bbe:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000bc0:	2906      	cmp	r1, #6
 8000bc2:	d002      	beq.n	8000bca <HAL_TIM_Base_Start_IT+0x1a>
  {
    __HAL_TIM_ENABLE(htim);
 8000bc4:	6819      	ldr	r1, [r3, #0]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000bca:	2000      	movs	r0, #0
 8000bcc:	4770      	bx	lr

08000bce <HAL_TIM_IC_MspInit>:
 8000bce:	4770      	bx	lr

08000bd0 <HAL_TIM_OC_DelayElapsedCallback>:
 8000bd0:	4770      	bx	lr

08000bd2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_TIM_TriggerCallback>:
 8000bd4:	4770      	bx	lr

08000bd6 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	6803      	ldr	r3, [r0, #0]
{
 8000bda:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000bdc:	6919      	ldr	r1, [r3, #16]
{
 8000bde:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000be0:	4211      	tst	r1, r2
 8000be2:	d00e      	beq.n	8000c02 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000be4:	68d9      	ldr	r1, [r3, #12]
 8000be6:	4211      	tst	r1, r2
 8000be8:	d00b      	beq.n	8000c02 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000bea:	3a05      	subs	r2, #5
 8000bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bee:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000bf0:	3204      	adds	r2, #4
 8000bf2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bf4:	079b      	lsls	r3, r3, #30
 8000bf6:	d100      	bne.n	8000bfa <HAL_TIM_IRQHandler+0x24>
 8000bf8:	e079      	b.n	8000cee <HAL_TIM_IRQHandler+0x118>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000bfa:	f000 fd12 	bl	8001622 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000c02:	2204      	movs	r2, #4
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	6919      	ldr	r1, [r3, #16]
 8000c08:	4211      	tst	r1, r2
 8000c0a:	d010      	beq.n	8000c2e <HAL_TIM_IRQHandler+0x58>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000c0c:	68d9      	ldr	r1, [r3, #12]
 8000c0e:	4211      	tst	r1, r2
 8000c10:	d00d      	beq.n	8000c2e <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000c12:	3a09      	subs	r2, #9
 8000c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c16:	3207      	adds	r2, #7
 8000c18:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c1a:	699a      	ldr	r2, [r3, #24]
 8000c1c:	23c0      	movs	r3, #192	; 0xc0
 8000c1e:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000c20:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c22:	421a      	tst	r2, r3
 8000c24:	d069      	beq.n	8000cfa <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c26:	f000 fcfc 	bl	8001622 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000c2e:	2208      	movs	r2, #8
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	6919      	ldr	r1, [r3, #16]
 8000c34:	4211      	tst	r1, r2
 8000c36:	d00e      	beq.n	8000c56 <HAL_TIM_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000c38:	68d9      	ldr	r1, [r3, #12]
 8000c3a:	4211      	tst	r1, r2
 8000c3c:	d00b      	beq.n	8000c56 <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000c3e:	3a11      	subs	r2, #17
 8000c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c42:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c44:	320d      	adds	r2, #13
 8000c46:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000c48:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c4a:	079b      	lsls	r3, r3, #30
 8000c4c:	d05b      	beq.n	8000d06 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c4e:	f000 fce8 	bl	8001622 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c52:	2300      	movs	r3, #0
 8000c54:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000c56:	2210      	movs	r2, #16
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	6919      	ldr	r1, [r3, #16]
 8000c5c:	4211      	tst	r1, r2
 8000c5e:	d010      	beq.n	8000c82 <HAL_TIM_IRQHandler+0xac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000c60:	68d9      	ldr	r1, [r3, #12]
 8000c62:	4211      	tst	r1, r2
 8000c64:	d00d      	beq.n	8000c82 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000c66:	3a21      	subs	r2, #33	; 0x21
 8000c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c6a:	3219      	adds	r2, #25
 8000c6c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c6e:	69da      	ldr	r2, [r3, #28]
 8000c70:	23c0      	movs	r3, #192	; 0xc0
 8000c72:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000c74:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c76:	421a      	tst	r2, r3
 8000c78:	d04b      	beq.n	8000d12 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c7a:	f000 fcd2 	bl	8001622 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c82:	2201      	movs	r2, #1
 8000c84:	6823      	ldr	r3, [r4, #0]
 8000c86:	6919      	ldr	r1, [r3, #16]
 8000c88:	4211      	tst	r1, r2
 8000c8a:	d007      	beq.n	8000c9c <HAL_TIM_IRQHandler+0xc6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000c8c:	68d9      	ldr	r1, [r3, #12]
 8000c8e:	4211      	tst	r1, r2
 8000c90:	d004      	beq.n	8000c9c <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c92:	3a03      	subs	r2, #3
 8000c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c96:	0020      	movs	r0, r4
 8000c98:	f000 fcc4 	bl	8001624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	6919      	ldr	r1, [r3, #16]
 8000ca2:	4211      	tst	r1, r2
 8000ca4:	d008      	beq.n	8000cb8 <HAL_TIM_IRQHandler+0xe2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000ca6:	68d9      	ldr	r1, [r3, #12]
 8000ca8:	4211      	tst	r1, r2
 8000caa:	d005      	beq.n	8000cb8 <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000cac:	3a02      	subs	r2, #2
 8000cae:	3aff      	subs	r2, #255	; 0xff
 8000cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	f000 fa75 	bl	80011a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000cb8:	2240      	movs	r2, #64	; 0x40
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	6919      	ldr	r1, [r3, #16]
 8000cbe:	4211      	tst	r1, r2
 8000cc0:	d007      	beq.n	8000cd2 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000cc2:	68d9      	ldr	r1, [r3, #12]
 8000cc4:	4211      	tst	r1, r2
 8000cc6:	d004      	beq.n	8000cd2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000cc8:	3a81      	subs	r2, #129	; 0x81
 8000cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000ccc:	0020      	movs	r0, r4
 8000cce:	f7ff ff81 	bl	8000bd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	6919      	ldr	r1, [r3, #16]
 8000cd8:	4211      	tst	r1, r2
 8000cda:	d007      	beq.n	8000cec <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000cdc:	68d9      	ldr	r1, [r3, #12]
 8000cde:	4211      	tst	r1, r2
 8000ce0:	d004      	beq.n	8000cec <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ce2:	3a41      	subs	r2, #65	; 0x41
 8000ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000ce6:	0020      	movs	r0, r4
 8000ce8:	f000 fa5a 	bl	80011a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000cec:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cee:	f7ff ff6f 	bl	8000bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cf2:	0020      	movs	r0, r4
 8000cf4:	f7ff ff6d 	bl	8000bd2 <HAL_TIM_PWM_PulseFinishedCallback>
 8000cf8:	e781      	b.n	8000bfe <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cfa:	f7ff ff69 	bl	8000bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cfe:	0020      	movs	r0, r4
 8000d00:	f7ff ff67 	bl	8000bd2 <HAL_TIM_PWM_PulseFinishedCallback>
 8000d04:	e791      	b.n	8000c2a <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d06:	f7ff ff63 	bl	8000bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	f7ff ff61 	bl	8000bd2 <HAL_TIM_PWM_PulseFinishedCallback>
 8000d10:	e79f      	b.n	8000c52 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d12:	f7ff ff5d 	bl	8000bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d16:	0020      	movs	r0, r4
 8000d18:	f7ff ff5b 	bl	8000bd2 <HAL_TIM_PWM_PulseFinishedCallback>
 8000d1c:	e7af      	b.n	8000c7e <HAL_TIM_IRQHandler+0xa8>
	...

08000d20 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <TIM_Base_SetConfig+0x68>)
{
 8000d22:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8000d24:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d002      	beq.n	8000d30 <TIM_Base_SetConfig+0x10>
 8000d2a:	4c18      	ldr	r4, [pc, #96]	; (8000d8c <TIM_Base_SetConfig+0x6c>)
 8000d2c:	42a0      	cmp	r0, r4
 8000d2e:	d108      	bne.n	8000d42 <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d30:	2470      	movs	r4, #112	; 0x70
 8000d32:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8000d34:	684c      	ldr	r4, [r1, #4]
 8000d36:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d38:	4290      	cmp	r0, r2
 8000d3a:	d00b      	beq.n	8000d54 <TIM_Base_SetConfig+0x34>
 8000d3c:	4c13      	ldr	r4, [pc, #76]	; (8000d8c <TIM_Base_SetConfig+0x6c>)
 8000d3e:	42a0      	cmp	r0, r4
 8000d40:	d008      	beq.n	8000d54 <TIM_Base_SetConfig+0x34>
 8000d42:	4c13      	ldr	r4, [pc, #76]	; (8000d90 <TIM_Base_SetConfig+0x70>)
 8000d44:	42a0      	cmp	r0, r4
 8000d46:	d005      	beq.n	8000d54 <TIM_Base_SetConfig+0x34>
 8000d48:	4c12      	ldr	r4, [pc, #72]	; (8000d94 <TIM_Base_SetConfig+0x74>)
 8000d4a:	42a0      	cmp	r0, r4
 8000d4c:	d002      	beq.n	8000d54 <TIM_Base_SetConfig+0x34>
 8000d4e:	4c12      	ldr	r4, [pc, #72]	; (8000d98 <TIM_Base_SetConfig+0x78>)
 8000d50:	42a0      	cmp	r0, r4
 8000d52:	d103      	bne.n	8000d5c <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d54:	4c11      	ldr	r4, [pc, #68]	; (8000d9c <TIM_Base_SetConfig+0x7c>)
 8000d56:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d58:	68cc      	ldr	r4, [r1, #12]
 8000d5a:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	43a3      	bics	r3, r4
 8000d60:	694c      	ldr	r4, [r1, #20]
 8000d62:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8000d64:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d66:	688b      	ldr	r3, [r1, #8]
 8000d68:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000d6a:	680b      	ldr	r3, [r1, #0]
 8000d6c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	d005      	beq.n	8000d7e <TIM_Base_SetConfig+0x5e>
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <TIM_Base_SetConfig+0x74>)
 8000d74:	4298      	cmp	r0, r3
 8000d76:	d002      	beq.n	8000d7e <TIM_Base_SetConfig+0x5e>
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <TIM_Base_SetConfig+0x78>)
 8000d7a:	4298      	cmp	r0, r3
 8000d7c:	d101      	bne.n	8000d82 <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d7e:	690b      	ldr	r3, [r1, #16]
 8000d80:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000d82:	2301      	movs	r3, #1
 8000d84:	6143      	str	r3, [r0, #20]
}
 8000d86:	bd10      	pop	{r4, pc}
 8000d88:	40012c00 	.word	0x40012c00
 8000d8c:	40000400 	.word	0x40000400
 8000d90:	40002000 	.word	0x40002000
 8000d94:	40014400 	.word	0x40014400
 8000d98:	40014800 	.word	0x40014800
 8000d9c:	fffffcff 	.word	0xfffffcff

08000da0 <HAL_TIM_Base_Init>:
{
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000da4:	2001      	movs	r0, #1
  if (htim == NULL)
 8000da6:	2c00      	cmp	r4, #0
 8000da8:	d014      	beq.n	8000dd4 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000daa:	0025      	movs	r5, r4
 8000dac:	353d      	adds	r5, #61	; 0x3d
 8000dae:	782b      	ldrb	r3, [r5, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d105      	bne.n	8000dc2 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8000db6:	0022      	movs	r2, r4
 8000db8:	323c      	adds	r2, #60	; 0x3c
 8000dba:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8000dbc:	0020      	movs	r0, r4
 8000dbe:	f000 fee7 	bl	8001b90 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000dc2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000dc4:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000dc6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000dc8:	1d21      	adds	r1, r4, #4
 8000dca:	f7ff ffa9 	bl	8000d20 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000dce:	2301      	movs	r3, #1
  return HAL_OK;
 8000dd0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000dd2:	702b      	strb	r3, [r5, #0]
}
 8000dd4:	bd70      	pop	{r4, r5, r6, pc}

08000dd6 <HAL_TIM_IC_Init>:
{
 8000dd6:	b570      	push	{r4, r5, r6, lr}
 8000dd8:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000dda:	2001      	movs	r0, #1
  if (htim == NULL)
 8000ddc:	2c00      	cmp	r4, #0
 8000dde:	d014      	beq.n	8000e0a <HAL_TIM_IC_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000de0:	0025      	movs	r5, r4
 8000de2:	353d      	adds	r5, #61	; 0x3d
 8000de4:	782b      	ldrb	r3, [r5, #0]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d105      	bne.n	8000df8 <HAL_TIM_IC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8000dec:	0022      	movs	r2, r4
 8000dee:	323c      	adds	r2, #60	; 0x3c
 8000df0:	7013      	strb	r3, [r2, #0]
    HAL_TIM_IC_MspInit(htim);
 8000df2:	0020      	movs	r0, r4
 8000df4:	f7ff feeb 	bl	8000bce <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000df8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000dfa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000dfc:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000dfe:	1d21      	adds	r1, r4, #4
 8000e00:	f7ff ff8e 	bl	8000d20 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000e04:	2301      	movs	r3, #1
  return HAL_OK;
 8000e06:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000e08:	702b      	strb	r3, [r5, #0]
}
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}

08000e0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8000e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e0e:	2601      	movs	r6, #1
 8000e10:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8000e12:	4f0e      	ldr	r7, [pc, #56]	; (8000e4c <TIM_TI1_SetConfig+0x40>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e14:	43b4      	bics	r4, r6
 8000e16:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e18:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8000e1a:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8000e1c:	42b8      	cmp	r0, r7
 8000e1e:	d002      	beq.n	8000e26 <TIM_TI1_SetConfig+0x1a>
 8000e20:	4f0b      	ldr	r7, [pc, #44]	; (8000e50 <TIM_TI1_SetConfig+0x44>)
 8000e22:	42b8      	cmp	r0, r7
 8000e24:	d102      	bne.n	8000e2c <TIM_TI1_SetConfig+0x20>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8000e26:	2603      	movs	r6, #3
 8000e28:	43b4      	bics	r4, r6
 8000e2a:	e000      	b.n	8000e2e <TIM_TI1_SetConfig+0x22>
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8000e2c:	0032      	movs	r2, r6
    tmpccmr1 |= TIM_ICSelection;
 8000e2e:	4322      	orrs	r2, r4
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000e30:	24f0      	movs	r4, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8000e32:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000e34:	43a2      	bics	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8000e36:	340f      	adds	r4, #15
 8000e38:	4023      	ands	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000e3a:	3cf5      	subs	r4, #245	; 0xf5
 8000e3c:	43a5      	bics	r5, r4
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8000e3e:	4021      	ands	r1, r4
 8000e40:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8000e42:	431a      	orrs	r2, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000e44:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000e46:	6201      	str	r1, [r0, #32]
}
 8000e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	40012c00 	.word	0x40012c00
 8000e50:	40000400 	.word	0x40000400

08000e54 <HAL_TIM_IC_ConfigChannel>:
{
 8000e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e56:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8000e58:	0001      	movs	r1, r0
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	313c      	adds	r1, #60	; 0x3c
 8000e5e:	780e      	ldrb	r6, [r1, #0]
{
 8000e60:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8000e62:	0018      	movs	r0, r3
 8000e64:	2e01      	cmp	r6, #1
 8000e66:	d01a      	beq.n	8000e9e <HAL_TIM_IC_ConfigChannel+0x4a>
 8000e68:	3801      	subs	r0, #1
 8000e6a:	7008      	strb	r0, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000e6c:	704b      	strb	r3, [r1, #1]
  if (Channel == TIM_CHANNEL_1)
 8000e6e:	2a00      	cmp	r2, #0
 8000e70:	d116      	bne.n	8000ea0 <HAL_TIM_IC_ConfigChannel+0x4c>
    TIM_TI1_SetConfig(htim->Instance,
 8000e72:	68eb      	ldr	r3, [r5, #12]
 8000e74:	686a      	ldr	r2, [r5, #4]
 8000e76:	6829      	ldr	r1, [r5, #0]
 8000e78:	6820      	ldr	r0, [r4, #0]
 8000e7a:	f7ff ffc7 	bl	8000e0c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8000e7e:	210c      	movs	r1, #12
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	699a      	ldr	r2, [r3, #24]
 8000e84:	438a      	bics	r2, r1
 8000e86:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8000e88:	699a      	ldr	r2, [r3, #24]
 8000e8a:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000e90:	0023      	movs	r3, r4
 8000e92:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8000e94:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000e96:	333d      	adds	r3, #61	; 0x3d
  __HAL_UNLOCK(htim);
 8000e98:	343c      	adds	r4, #60	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8000e9a:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(htim);
 8000e9c:	7020      	strb	r0, [r4, #0]
}
 8000e9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000ea0:	6829      	ldr	r1, [r5, #0]
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	9101      	str	r1, [sp, #4]
 8000ea6:	686e      	ldr	r6, [r5, #4]
 8000ea8:	68e8      	ldr	r0, [r5, #12]
  else if (Channel == TIM_CHANNEL_2)
 8000eaa:	2a04      	cmp	r2, #4
 8000eac:	d11e      	bne.n	8000eec <HAL_TIM_IC_ConfigChannel+0x98>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000eae:	2710      	movs	r7, #16
 8000eb0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8000eb2:	4930      	ldr	r1, [pc, #192]	; (8000f74 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000eb4:	43ba      	bics	r2, r7
 8000eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000eb8:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8000eba:	0236      	lsls	r6, r6, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8000ebc:	400f      	ands	r7, r1
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8000ebe:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ec0:	4f2d      	ldr	r7, [pc, #180]	; (8000f78 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8000ec2:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ec4:	403e      	ands	r6, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8000ec6:	0c00      	lsrs	r0, r0, #16
 8000ec8:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000eca:	26a0      	movs	r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8000ecc:	9901      	ldr	r1, [sp, #4]
  tmpccer = TIMx->CCER;
 8000ece:	6a1a      	ldr	r2, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8000ed0:	0109      	lsls	r1, r1, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ed2:	43b2      	bics	r2, r6
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8000ed4:	4031      	ands	r1, r6
 8000ed6:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000ed8:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8000eda:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8000edc:	699a      	ldr	r2, [r3, #24]
 8000ede:	4927      	ldr	r1, [pc, #156]	; (8000f7c <HAL_TIM_IC_ConfigChannel+0x128>)
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8000ee4:	68aa      	ldr	r2, [r5, #8]
 8000ee6:	6999      	ldr	r1, [r3, #24]
 8000ee8:	0212      	lsls	r2, r2, #8
 8000eea:	e7cf      	b.n	8000e8c <HAL_TIM_IC_ConfigChannel+0x38>
 8000eec:	68ad      	ldr	r5, [r5, #8]
  else if (Channel == TIM_CHANNEL_3)
 8000eee:	2a08      	cmp	r2, #8
 8000ef0:	d120      	bne.n	8000f34 <HAL_TIM_IC_ConfigChannel+0xe0>
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8000ef2:	2103      	movs	r1, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000ef4:	6a1a      	ldr	r2, [r3, #32]
 8000ef6:	4f22      	ldr	r7, [pc, #136]	; (8000f80 <HAL_TIM_IC_ConfigChannel+0x12c>)
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8000ef8:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000efa:	403a      	ands	r2, r7
 8000efc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000efe:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 8000f00:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8000f02:	438f      	bics	r7, r1
  tmpccmr2 |= TIM_ICSelection;
 8000f04:	433e      	orrs	r6, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8000f06:	27f0      	movs	r7, #240	; 0xf0
 8000f08:	43be      	bics	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8000f0a:	370f      	adds	r7, #15
 8000f0c:	4038      	ands	r0, r7
 8000f0e:	4306      	orrs	r6, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8000f10:	481c      	ldr	r0, [pc, #112]	; (8000f84 <HAL_TIM_IC_ConfigChannel+0x130>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8000f12:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8000f14:	4002      	ands	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8000f16:	20a0      	movs	r0, #160	; 0xa0
 8000f18:	0209      	lsls	r1, r1, #8
 8000f1a:	0100      	lsls	r0, r0, #4
 8000f1c:	4001      	ands	r1, r0
 8000f1e:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000f20:	61de      	str	r6, [r3, #28]
  TIMx->CCER = tmpccer;
 8000f22:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8000f24:	210c      	movs	r1, #12
 8000f26:	69da      	ldr	r2, [r3, #28]
 8000f28:	438a      	bics	r2, r1
 8000f2a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8000f2c:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8000f2e:	4315      	orrs	r5, r2
 8000f30:	61dd      	str	r5, [r3, #28]
 8000f32:	e7ad      	b.n	8000e90 <HAL_TIM_IC_ConfigChannel+0x3c>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000f34:	6a1a      	ldr	r2, [r3, #32]
 8000f36:	4f14      	ldr	r7, [pc, #80]	; (8000f88 <HAL_TIM_IC_ConfigChannel+0x134>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8000f38:	490e      	ldr	r1, [pc, #56]	; (8000f74 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000f3a:	403a      	ands	r2, r7
 8000f3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000f3e:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8000f40:	0236      	lsls	r6, r6, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8000f42:	400f      	ands	r7, r1
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8000f44:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8000f46:	4f0c      	ldr	r7, [pc, #48]	; (8000f78 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8000f48:	0700      	lsls	r0, r0, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8000f4a:	403e      	ands	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8000f4c:	0c00      	lsrs	r0, r0, #16
  tmpccer = TIMx->CCER;
 8000f4e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8000f50:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8000f52:	4e0e      	ldr	r6, [pc, #56]	; (8000f8c <HAL_TIM_IC_ConfigChannel+0x138>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8000f54:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8000f56:	4032      	ands	r2, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8000f58:	26a0      	movs	r6, #160	; 0xa0
 8000f5a:	0309      	lsls	r1, r1, #12
 8000f5c:	0236      	lsls	r6, r6, #8
 8000f5e:	4031      	ands	r1, r6
 8000f60:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000f62:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8000f64:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8000f66:	69da      	ldr	r2, [r3, #28]
 8000f68:	4904      	ldr	r1, [pc, #16]	; (8000f7c <HAL_TIM_IC_ConfigChannel+0x128>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8000f6a:	022d      	lsls	r5, r5, #8
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8000f6c:	400a      	ands	r2, r1
 8000f6e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8000f70:	69da      	ldr	r2, [r3, #28]
 8000f72:	e7dc      	b.n	8000f2e <HAL_TIM_IC_ConfigChannel+0xda>
 8000f74:	fffffcff 	.word	0xfffffcff
 8000f78:	ffff0fff 	.word	0xffff0fff
 8000f7c:	fffff3ff 	.word	0xfffff3ff
 8000f80:	fffffeff 	.word	0xfffffeff
 8000f84:	fffff5ff 	.word	0xfffff5ff
 8000f88:	ffffefff 	.word	0xffffefff
 8000f8c:	ffff5fff 	.word	0xffff5fff

08000f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000f90:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8000f92:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f94:	4d03      	ldr	r5, [pc, #12]	; (8000fa4 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f96:	430a      	orrs	r2, r1
 8000f98:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f9a:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000fa0:	6083      	str	r3, [r0, #8]
}
 8000fa2:	bd30      	pop	{r4, r5, pc}
 8000fa4:	ffff00ff 	.word	0xffff00ff

08000fa8 <HAL_TIM_ConfigClockSource>:
{
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8000faa:	0005      	movs	r5, r0
 8000fac:	2302      	movs	r3, #2
 8000fae:	353c      	adds	r5, #60	; 0x3c
 8000fb0:	782a      	ldrb	r2, [r5, #0]
{
 8000fb2:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	2a01      	cmp	r2, #1
 8000fb8:	d016      	beq.n	8000fe8 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8000fba:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8000fbc:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8000fbe:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000fc0:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8000fc2:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000fc4:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8000fc6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fc8:	4a40      	ldr	r2, [pc, #256]	; (80010cc <HAL_TIM_ConfigClockSource+0x124>)
 8000fca:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000fcc:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000fce:	680b      	ldr	r3, [r1, #0]
 8000fd0:	2b40      	cmp	r3, #64	; 0x40
 8000fd2:	d065      	beq.n	80010a0 <HAL_TIM_ConfigClockSource+0xf8>
 8000fd4:	d814      	bhi.n	8001000 <HAL_TIM_ConfigClockSource+0x58>
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	d00b      	beq.n	8000ff2 <HAL_TIM_ConfigClockSource+0x4a>
 8000fda:	d806      	bhi.n	8000fea <HAL_TIM_ConfigClockSource+0x42>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d008      	beq.n	8000ff2 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8000fe0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000fe2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000fe4:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8000fe6:	7028      	strb	r0, [r5, #0]
}
 8000fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8000fea:	2b20      	cmp	r3, #32
 8000fec:	d001      	beq.n	8000ff2 <HAL_TIM_ConfigClockSource+0x4a>
 8000fee:	2b30      	cmp	r3, #48	; 0x30
 8000ff0:	d1f6      	bne.n	8000fe0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8000ff2:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8000ff4:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000ff6:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000ff8:	3a69      	subs	r2, #105	; 0x69
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	e01a      	b.n	8001036 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8001000:	2b60      	cmp	r3, #96	; 0x60
 8001002:	d035      	beq.n	8001070 <HAL_TIM_ConfigClockSource+0xc8>
 8001004:	d819      	bhi.n	800103a <HAL_TIM_ConfigClockSource+0x92>
 8001006:	2b50      	cmp	r3, #80	; 0x50
 8001008:	d1ea      	bne.n	8000fe0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800100a:	684a      	ldr	r2, [r1, #4]
 800100c:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800100e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001010:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001012:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001014:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001016:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001018:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800101a:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800101c:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800101e:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001020:	240a      	movs	r4, #10
 8001022:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001024:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001026:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001028:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800102a:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800102c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800102e:	4393      	bics	r3, r2
 8001030:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001032:	2357      	movs	r3, #87	; 0x57
 8001034:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8001036:	6083      	str	r3, [r0, #8]
 8001038:	e7d2      	b.n	8000fe0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800103a:	2b70      	cmp	r3, #112	; 0x70
 800103c:	d00d      	beq.n	800105a <HAL_TIM_ConfigClockSource+0xb2>
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	0192      	lsls	r2, r2, #6
 8001042:	4293      	cmp	r3, r2
 8001044:	d1cc      	bne.n	8000fe0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001046:	68cb      	ldr	r3, [r1, #12]
 8001048:	684a      	ldr	r2, [r1, #4]
 800104a:	6889      	ldr	r1, [r1, #8]
 800104c:	f7ff ffa0 	bl	8000f90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	6822      	ldr	r2, [r4, #0]
 8001054:	01db      	lsls	r3, r3, #7
 8001056:	6891      	ldr	r1, [r2, #8]
 8001058:	e007      	b.n	800106a <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 800105a:	68cb      	ldr	r3, [r1, #12]
 800105c:	684a      	ldr	r2, [r1, #4]
 800105e:	6889      	ldr	r1, [r1, #8]
 8001060:	f7ff ff96 	bl	8000f90 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001064:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8001066:	6822      	ldr	r2, [r4, #0]
 8001068:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800106a:	430b      	orrs	r3, r1
 800106c:	6093      	str	r3, [r2, #8]
      break;
 800106e:	e7b7      	b.n	8000fe0 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001070:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001072:	684b      	ldr	r3, [r1, #4]
 8001074:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001076:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001078:	4f15      	ldr	r7, [pc, #84]	; (80010d0 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800107a:	43a1      	bics	r1, r4
 800107c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800107e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001080:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001082:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001084:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001086:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001088:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800108a:	6182      	str	r2, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800108c:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800108e:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8001094:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001096:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001098:	4393      	bics	r3, r2
 800109a:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800109c:	2367      	movs	r3, #103	; 0x67
 800109e:	e7c9      	b.n	8001034 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80010a0:	684a      	ldr	r2, [r1, #4]
 80010a2:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80010a4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010a6:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80010a8:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010aa:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80010ac:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010ae:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010b0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80010b2:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80010b4:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80010b6:	240a      	movs	r4, #10
 80010b8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80010ba:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80010bc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80010be:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80010c0:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80010c2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80010c4:	4393      	bics	r3, r2
 80010c6:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80010c8:	2347      	movs	r3, #71	; 0x47
 80010ca:	e7b3      	b.n	8001034 <HAL_TIM_ConfigClockSource+0x8c>
 80010cc:	ffff0088 	.word	0xffff0088
 80010d0:	ffff0fff 	.word	0xffff0fff

080010d4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80010d4:	231f      	movs	r3, #31
{
 80010d6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80010d8:	2401      	movs	r4, #1
 80010da:	4019      	ands	r1, r3
 80010dc:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80010de:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80010e0:	6a03      	ldr	r3, [r0, #32]
 80010e2:	43a3      	bics	r3, r4
 80010e4:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80010e6:	6a03      	ldr	r3, [r0, #32]
 80010e8:	431a      	orrs	r2, r3
 80010ea:	6202      	str	r2, [r0, #32]
}
 80010ec:	bd10      	pop	{r4, pc}

080010ee <HAL_TIM_IC_Start_IT>:
{
 80010ee:	b510      	push	{r4, lr}
 80010f0:	0004      	movs	r4, r0
  switch (Channel)
 80010f2:	290c      	cmp	r1, #12
 80010f4:	d80e      	bhi.n	8001114 <HAL_TIM_IC_Start_IT+0x26>
 80010f6:	0008      	movs	r0, r1
 80010f8:	f7ff f80e 	bl	8000118 <__gnu_thumb1_case_uqi>
 80010fc:	0c0c0c07 	.word	0x0c0c0c07
 8001100:	0c0c0c1c 	.word	0x0c0c0c1c
 8001104:	0c0c0c20 	.word	0x0c0c0c20
 8001108:	24          	.byte	0x24
 8001109:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800110a:	2302      	movs	r3, #2
 800110c:	6822      	ldr	r2, [r4, #0]
 800110e:	68d0      	ldr	r0, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001110:	4303      	orrs	r3, r0
 8001112:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001114:	2201      	movs	r2, #1
 8001116:	6820      	ldr	r0, [r4, #0]
 8001118:	f7ff ffdc 	bl	80010d4 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800111c:	2107      	movs	r1, #7
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001124:	2a06      	cmp	r2, #6
 8001126:	d003      	beq.n	8001130 <HAL_TIM_IC_Start_IT+0x42>
    __HAL_TIM_ENABLE(htim);
 8001128:	2201      	movs	r2, #1
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	2000      	movs	r0, #0
 8001132:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001134:	6822      	ldr	r2, [r4, #0]
 8001136:	2304      	movs	r3, #4
 8001138:	68d0      	ldr	r0, [r2, #12]
 800113a:	e7e9      	b.n	8001110 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800113c:	6822      	ldr	r2, [r4, #0]
 800113e:	2308      	movs	r3, #8
 8001140:	68d0      	ldr	r0, [r2, #12]
 8001142:	e7e5      	b.n	8001110 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001144:	6822      	ldr	r2, [r4, #0]
 8001146:	2310      	movs	r3, #16
 8001148:	68d0      	ldr	r0, [r2, #12]
 800114a:	e7e1      	b.n	8001110 <HAL_TIM_IC_Start_IT+0x22>

0800114c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800114c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800114e:	0004      	movs	r4, r0
 8001150:	2202      	movs	r2, #2
 8001152:	343c      	adds	r4, #60	; 0x3c
 8001154:	7825      	ldrb	r5, [r4, #0]
{
 8001156:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001158:	0010      	movs	r0, r2
 800115a:	2d01      	cmp	r5, #1
 800115c:	d01b      	beq.n	8001196 <HAL_TIMEx_MasterConfigSynchronization+0x4a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800115e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001160:	2670      	movs	r6, #112	; 0x70
  tmpcr2 = htim->Instance->CR2;
 8001162:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(htim);
 8001164:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001166:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8001168:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800116a:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 800116c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800116e:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001170:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001172:	680e      	ldr	r6, [r1, #0]
 8001174:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001176:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 800117a:	4283      	cmp	r3, r0
 800117c:	d002      	beq.n	8001184 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 800117e:	4807      	ldr	r0, [pc, #28]	; (800119c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8001180:	4283      	cmp	r3, r0
 8001182:	d104      	bne.n	800118e <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001184:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001186:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001188:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800118a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800118c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800118e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001190:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001192:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001194:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	40012c00 	.word	0x40012c00
 800119c:	40000400 	.word	0x40000400

080011a0 <HAL_TIMEx_CommutCallback>:
 80011a0:	4770      	bx	lr

080011a2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80011a2:	4770      	bx	lr

080011a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011a4:	b570      	push	{r4, r5, r6, lr}
 80011a6:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011a8:	6925      	ldr	r5, [r4, #16]
 80011aa:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80011ac:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011ae:	432b      	orrs	r3, r5
 80011b0:	6965      	ldr	r5, [r4, #20]
 80011b2:	69c1      	ldr	r1, [r0, #28]
 80011b4:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80011b6:	6810      	ldr	r0, [r2, #0]
 80011b8:	4d3e      	ldr	r5, [pc, #248]	; (80012b4 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011ba:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80011bc:	4028      	ands	r0, r5
 80011be:	4303      	orrs	r3, r0
 80011c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011c2:	6853      	ldr	r3, [r2, #4]
 80011c4:	483c      	ldr	r0, [pc, #240]	; (80012b8 <UART_SetConfig+0x114>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80011c6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011c8:	4003      	ands	r3, r0
 80011ca:	68e0      	ldr	r0, [r4, #12]
 80011cc:	4303      	orrs	r3, r0
 80011ce:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80011d0:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80011d2:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80011d4:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80011d6:	4d39      	ldr	r5, [pc, #228]	; (80012bc <UART_SetConfig+0x118>)
 80011d8:	4028      	ands	r0, r5
 80011da:	4303      	orrs	r3, r0
 80011dc:	6093      	str	r3, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80011de:	2203      	movs	r2, #3
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <UART_SetConfig+0x11c>)
 80011e2:	4d38      	ldr	r5, [pc, #224]	; (80012c4 <UART_SetConfig+0x120>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4013      	ands	r3, r2
 80011e8:	4a37      	ldr	r2, [pc, #220]	; (80012c8 <UART_SetConfig+0x124>)
 80011ea:	5cd0      	ldrb	r0, [r2, r3]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	4299      	cmp	r1, r3
 80011f2:	d135      	bne.n	8001260 <UART_SetConfig+0xbc>
  {
    switch (clocksource)
 80011f4:	2808      	cmp	r0, #8
 80011f6:	d826      	bhi.n	8001246 <UART_SetConfig+0xa2>
 80011f8:	f7fe ff8e 	bl	8000118 <__gnu_thumb1_case_uqi>
 80011fc:	250b2505 	.word	0x250b2505
 8001200:	2525251d 	.word	0x2525251d
 8001204:	20          	.byte	0x20
 8001205:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001206:	f7ff fc3f 	bl	8000a88 <HAL_RCC_GetPCLK1Freq>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800120a:	6863      	ldr	r3, [r4, #4]
 800120c:	0040      	lsls	r0, r0, #1
 800120e:	085b      	lsrs	r3, r3, #1
 8001210:	e002      	b.n	8001218 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001212:	6863      	ldr	r3, [r4, #4]
 8001214:	0858      	lsrs	r0, r3, #1
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <UART_SetConfig+0x128>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001218:	18c0      	adds	r0, r0, r3
 800121a:	6861      	ldr	r1, [r4, #4]
 800121c:	f7fe ff86 	bl	800012c <__udivsi3>
 8001220:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001222:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001224:	001a      	movs	r2, r3
 8001226:	3a10      	subs	r2, #16
 8001228:	42aa      	cmp	r2, r5
 800122a:	d90f      	bls.n	800124c <UART_SetConfig+0xa8>
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
      huart->Instance->BRR = brrtemp;
    }
    else
    {
      ret = HAL_ERROR;
 800122c:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800122e:	2300      	movs	r3, #0
 8001230:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001232:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001234:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8001236:	f7ff fb71 	bl	800091c <HAL_RCC_GetSysClockFreq>
 800123a:	e7e6      	b.n	800120a <UART_SetConfig+0x66>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800123c:	6863      	ldr	r3, [r4, #4]
 800123e:	0858      	lsrs	r0, r3, #1
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	e7e8      	b.n	8001218 <UART_SetConfig+0x74>
        ret = HAL_ERROR;
 8001246:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001248:	2300      	movs	r3, #0
 800124a:	e7eb      	b.n	8001224 <UART_SetConfig+0x80>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800124c:	220f      	movs	r2, #15
 800124e:	0019      	movs	r1, r3
 8001250:	4391      	bics	r1, r2
 8001252:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001254:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 8001256:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001258:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800125a:	4313      	orrs	r3, r2
 800125c:	60cb      	str	r3, [r1, #12]
 800125e:	e7e6      	b.n	800122e <UART_SetConfig+0x8a>
    switch (clocksource)
 8001260:	2808      	cmp	r0, #8
 8001262:	d823      	bhi.n	80012ac <UART_SetConfig+0x108>
 8001264:	f7fe ff58 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001268:	220a2205 	.word	0x220a2205
 800126c:	2222221a 	.word	0x2222221a
 8001270:	1d          	.byte	0x1d
 8001271:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8001272:	f7ff fc09 	bl	8000a88 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001276:	6863      	ldr	r3, [r4, #4]
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	e002      	b.n	8001282 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800127c:	6863      	ldr	r3, [r4, #4]
 800127e:	0858      	lsrs	r0, r3, #1
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001282:	18c0      	adds	r0, r0, r3
 8001284:	6861      	ldr	r1, [r4, #4]
 8001286:	f7fe ff51 	bl	800012c <__udivsi3>
 800128a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800128c:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800128e:	001a      	movs	r2, r3
 8001290:	3a10      	subs	r2, #16
 8001292:	42aa      	cmp	r2, r5
 8001294:	d8ca      	bhi.n	800122c <UART_SetConfig+0x88>
      huart->Instance->BRR = usartdiv;
 8001296:	6822      	ldr	r2, [r4, #0]
 8001298:	60d3      	str	r3, [r2, #12]
 800129a:	e7c8      	b.n	800122e <UART_SetConfig+0x8a>
        pclk = HAL_RCC_GetSysClockFreq();
 800129c:	f7ff fb3e 	bl	800091c <HAL_RCC_GetSysClockFreq>
 80012a0:	e7e9      	b.n	8001276 <UART_SetConfig+0xd2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80012a2:	6863      	ldr	r3, [r4, #4]
 80012a4:	0858      	lsrs	r0, r3, #1
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	e7ea      	b.n	8001282 <UART_SetConfig+0xde>
        ret = HAL_ERROR;
 80012ac:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e7ed      	b.n	800128e <UART_SetConfig+0xea>
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	ffff69f3 	.word	0xffff69f3
 80012b8:	ffffcfff 	.word	0xffffcfff
 80012bc:	fffff4ff 	.word	0xfffff4ff
 80012c0:	40021000 	.word	0x40021000
 80012c4:	0000ffef 	.word	0x0000ffef
 80012c8:	08001f48 	.word	0x08001f48
 80012cc:	00f42400 	.word	0x00f42400
 80012d0:	007a1200 	.word	0x007a1200

080012d4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80012d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80012d6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80012d8:	07da      	lsls	r2, r3, #31
 80012da:	d506      	bpl.n	80012ea <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80012dc:	6801      	ldr	r1, [r0, #0]
 80012de:	4c28      	ldr	r4, [pc, #160]	; (8001380 <UART_AdvFeatureConfig+0xac>)
 80012e0:	684a      	ldr	r2, [r1, #4]
 80012e2:	4022      	ands	r2, r4
 80012e4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80012e6:	4322      	orrs	r2, r4
 80012e8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80012ea:	079a      	lsls	r2, r3, #30
 80012ec:	d506      	bpl.n	80012fc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80012ee:	6801      	ldr	r1, [r0, #0]
 80012f0:	4c24      	ldr	r4, [pc, #144]	; (8001384 <UART_AdvFeatureConfig+0xb0>)
 80012f2:	684a      	ldr	r2, [r1, #4]
 80012f4:	4022      	ands	r2, r4
 80012f6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80012f8:	4322      	orrs	r2, r4
 80012fa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80012fc:	075a      	lsls	r2, r3, #29
 80012fe:	d506      	bpl.n	800130e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001300:	6801      	ldr	r1, [r0, #0]
 8001302:	4c21      	ldr	r4, [pc, #132]	; (8001388 <UART_AdvFeatureConfig+0xb4>)
 8001304:	684a      	ldr	r2, [r1, #4]
 8001306:	4022      	ands	r2, r4
 8001308:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800130a:	4322      	orrs	r2, r4
 800130c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800130e:	071a      	lsls	r2, r3, #28
 8001310:	d506      	bpl.n	8001320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001312:	6801      	ldr	r1, [r0, #0]
 8001314:	4c1d      	ldr	r4, [pc, #116]	; (800138c <UART_AdvFeatureConfig+0xb8>)
 8001316:	684a      	ldr	r2, [r1, #4]
 8001318:	4022      	ands	r2, r4
 800131a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800131c:	4322      	orrs	r2, r4
 800131e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001320:	06da      	lsls	r2, r3, #27
 8001322:	d506      	bpl.n	8001332 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001324:	6801      	ldr	r1, [r0, #0]
 8001326:	4c1a      	ldr	r4, [pc, #104]	; (8001390 <UART_AdvFeatureConfig+0xbc>)
 8001328:	688a      	ldr	r2, [r1, #8]
 800132a:	4022      	ands	r2, r4
 800132c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800132e:	4322      	orrs	r2, r4
 8001330:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001332:	069a      	lsls	r2, r3, #26
 8001334:	d506      	bpl.n	8001344 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001336:	6801      	ldr	r1, [r0, #0]
 8001338:	4c16      	ldr	r4, [pc, #88]	; (8001394 <UART_AdvFeatureConfig+0xc0>)
 800133a:	688a      	ldr	r2, [r1, #8]
 800133c:	4022      	ands	r2, r4
 800133e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001340:	4322      	orrs	r2, r4
 8001342:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001344:	065a      	lsls	r2, r3, #25
 8001346:	d510      	bpl.n	800136a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001348:	6801      	ldr	r1, [r0, #0]
 800134a:	4d13      	ldr	r5, [pc, #76]	; (8001398 <UART_AdvFeatureConfig+0xc4>)
 800134c:	684a      	ldr	r2, [r1, #4]
 800134e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001350:	402a      	ands	r2, r5
 8001352:	4322      	orrs	r2, r4
 8001354:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0352      	lsls	r2, r2, #13
 800135a:	4294      	cmp	r4, r2
 800135c:	d105      	bne.n	800136a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800135e:	684a      	ldr	r2, [r1, #4]
 8001360:	4c0e      	ldr	r4, [pc, #56]	; (800139c <UART_AdvFeatureConfig+0xc8>)
 8001362:	4022      	ands	r2, r4
 8001364:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001366:	4322      	orrs	r2, r4
 8001368:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800136a:	061b      	lsls	r3, r3, #24
 800136c:	d506      	bpl.n	800137c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800136e:	6802      	ldr	r2, [r0, #0]
 8001370:	490b      	ldr	r1, [pc, #44]	; (80013a0 <UART_AdvFeatureConfig+0xcc>)
 8001372:	6853      	ldr	r3, [r2, #4]
 8001374:	400b      	ands	r3, r1
 8001376:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001378:	430b      	orrs	r3, r1
 800137a:	6053      	str	r3, [r2, #4]
  }
}
 800137c:	bd30      	pop	{r4, r5, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	fffdffff 	.word	0xfffdffff
 8001384:	fffeffff 	.word	0xfffeffff
 8001388:	fffbffff 	.word	0xfffbffff
 800138c:	ffff7fff 	.word	0xffff7fff
 8001390:	ffffefff 	.word	0xffffefff
 8001394:	ffffdfff 	.word	0xffffdfff
 8001398:	ffefffff 	.word	0xffefffff
 800139c:	ff9fffff 	.word	0xff9fffff
 80013a0:	fff7ffff 	.word	0xfff7ffff

080013a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80013a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80013a6:	2780      	movs	r7, #128	; 0x80
{
 80013a8:	0004      	movs	r4, r0
 80013aa:	000e      	movs	r6, r1
 80013ac:	0015      	movs	r5, r2
 80013ae:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80013b0:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013b2:	6822      	ldr	r2, [r4, #0]
 80013b4:	69d3      	ldr	r3, [r2, #28]
 80013b6:	4033      	ands	r3, r6
 80013b8:	1b9b      	subs	r3, r3, r6
 80013ba:	4259      	negs	r1, r3
 80013bc:	414b      	adcs	r3, r1
 80013be:	42ab      	cmp	r3, r5
 80013c0:	d001      	beq.n	80013c6 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80013c2:	2000      	movs	r0, #0
 80013c4:	e01c      	b.n	8001400 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80013c6:	9b08      	ldr	r3, [sp, #32]
 80013c8:	3301      	adds	r3, #1
 80013ca:	d0f3      	beq.n	80013b4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013cc:	f7fe ff7a 	bl	80002c4 <HAL_GetTick>
 80013d0:	9b01      	ldr	r3, [sp, #4]
 80013d2:	9a08      	ldr	r2, [sp, #32]
 80013d4:	1ac0      	subs	r0, r0, r3
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	4282      	cmp	r2, r0
 80013da:	d301      	bcc.n	80013e0 <UART_WaitOnFlagUntilTimeout+0x3c>
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d110      	bne.n	8001402 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4913      	ldr	r1, [pc, #76]	; (8001430 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80013e4:	400a      	ands	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	31a3      	adds	r1, #163	; 0xa3
 80013ec:	31ff      	adds	r1, #255	; 0xff
 80013ee:	438a      	bics	r2, r1
 80013f0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80013f2:	2320      	movs	r3, #32
 80013f4:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80013f6:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80013f8:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80013fa:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80013fc:	3470      	adds	r4, #112	; 0x70
 80013fe:	7023      	strb	r3, [r4, #0]
}
 8001400:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001402:	2104      	movs	r1, #4
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	420a      	tst	r2, r1
 8001408:	d0d3      	beq.n	80013b2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800140a:	69da      	ldr	r2, [r3, #28]
 800140c:	423a      	tst	r2, r7
 800140e:	d0d0      	beq.n	80013b2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001410:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4906      	ldr	r1, [pc, #24]	; (8001430 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8001416:	400a      	ands	r2, r1
 8001418:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	31a3      	adds	r1, #163	; 0xa3
 800141e:	31ff      	adds	r1, #255	; 0xff
 8001420:	438a      	bics	r2, r1
 8001422:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001424:	2320      	movs	r3, #32
 8001426:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001428:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800142a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800142c:	e7e4      	b.n	80013f8 <UART_WaitOnFlagUntilTimeout+0x54>
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	fffffe5f 	.word	0xfffffe5f

08001434 <HAL_UART_Transmit>:
{
 8001434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001436:	b087      	sub	sp, #28
 8001438:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800143a:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800143c:	0004      	movs	r4, r0
 800143e:	000d      	movs	r5, r1
 8001440:	0017      	movs	r7, r2
    return HAL_BUSY;
 8001442:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001444:	2b20      	cmp	r3, #32
 8001446:	d149      	bne.n	80014dc <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8001448:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800144a:	2900      	cmp	r1, #0
 800144c:	d046      	beq.n	80014dc <HAL_UART_Transmit+0xa8>
 800144e:	2a00      	cmp	r2, #0
 8001450:	d044      	beq.n	80014dc <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	68a2      	ldr	r2, [r4, #8]
 8001456:	015b      	lsls	r3, r3, #5
 8001458:	429a      	cmp	r2, r3
 800145a:	d104      	bne.n	8001466 <HAL_UART_Transmit+0x32>
 800145c:	6923      	ldr	r3, [r4, #16]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001462:	4201      	tst	r1, r0
 8001464:	d13a      	bne.n	80014dc <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8001466:	0023      	movs	r3, r4
 8001468:	3370      	adds	r3, #112	; 0x70
 800146a:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800146c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800146e:	2a01      	cmp	r2, #1
 8001470:	d034      	beq.n	80014dc <HAL_UART_Transmit+0xa8>
 8001472:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001474:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8001476:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001478:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800147a:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800147c:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 800147e:	f7fe ff21 	bl	80002c4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001482:	0023      	movs	r3, r4
 8001484:	3350      	adds	r3, #80	; 0x50
 8001486:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8001488:	3302      	adds	r3, #2
 800148a:	9303      	str	r3, [sp, #12]
 800148c:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001492:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001494:	015b      	lsls	r3, r3, #5
 8001496:	429a      	cmp	r2, r3
 8001498:	d104      	bne.n	80014a4 <HAL_UART_Transmit+0x70>
 800149a:	6923      	ldr	r3, [r4, #16]
 800149c:	42b3      	cmp	r3, r6
 800149e:	d101      	bne.n	80014a4 <HAL_UART_Transmit+0x70>
 80014a0:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80014a2:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80014a4:	0023      	movs	r3, r4
 80014a6:	3352      	adds	r3, #82	; 0x52
 80014a8:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014aa:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 80014ac:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 80014b2:	2a00      	cmp	r2, #0
 80014b4:	d10a      	bne.n	80014cc <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014b6:	2140      	movs	r1, #64	; 0x40
 80014b8:	0020      	movs	r0, r4
 80014ba:	f7ff ff73 	bl	80013a4 <UART_WaitOnFlagUntilTimeout>
 80014be:	2800      	cmp	r0, #0
 80014c0:	d10b      	bne.n	80014da <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 80014c2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80014c4:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80014c6:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 80014c8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80014ca:	e007      	b.n	80014dc <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014cc:	2200      	movs	r2, #0
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	0020      	movs	r0, r4
 80014d2:	f7ff ff67 	bl	80013a4 <UART_WaitOnFlagUntilTimeout>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d002      	beq.n	80014e0 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80014da:	2003      	movs	r0, #3
}
 80014dc:	b007      	add	sp, #28
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e0:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80014e2:	2d00      	cmp	r5, #0
 80014e4:	d10b      	bne.n	80014fe <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014e6:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80014e8:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014ea:	05db      	lsls	r3, r3, #23
 80014ec:	0ddb      	lsrs	r3, r3, #23
 80014ee:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80014f0:	9b03      	ldr	r3, [sp, #12]
 80014f2:	9a03      	ldr	r2, [sp, #12]
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	8013      	strh	r3, [r2, #0]
 80014fc:	e7d2      	b.n	80014a4 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80014fe:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8001500:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001502:	8513      	strh	r3, [r2, #40]	; 0x28
 8001504:	e7f4      	b.n	80014f0 <HAL_UART_Transmit+0xbc>
	...

08001508 <UART_CheckIdleState>:
{
 8001508:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800150a:	2600      	movs	r6, #0
{
 800150c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800150e:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001510:	f7fe fed8 	bl	80002c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001514:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001516:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	071b      	lsls	r3, r3, #28
 800151c:	d415      	bmi.n	800154a <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	075b      	lsls	r3, r3, #29
 8001524:	d50a      	bpl.n	800153c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001526:	2180      	movs	r1, #128	; 0x80
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <UART_CheckIdleState+0x5c>)
 800152a:	2200      	movs	r2, #0
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	03c9      	lsls	r1, r1, #15
 8001530:	002b      	movs	r3, r5
 8001532:	0020      	movs	r0, r4
 8001534:	f7ff ff36 	bl	80013a4 <UART_WaitOnFlagUntilTimeout>
 8001538:	2800      	cmp	r0, #0
 800153a:	d111      	bne.n	8001560 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800153c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800153e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001540:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001542:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001544:	3470      	adds	r4, #112	; 0x70
 8001546:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001548:	e00b      	b.n	8001562 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <UART_CheckIdleState+0x5c>)
 800154e:	0032      	movs	r2, r6
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	0389      	lsls	r1, r1, #14
 8001554:	0003      	movs	r3, r0
 8001556:	0020      	movs	r0, r4
 8001558:	f7ff ff24 	bl	80013a4 <UART_WaitOnFlagUntilTimeout>
 800155c:	2800      	cmp	r0, #0
 800155e:	d0de      	beq.n	800151e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001560:	2003      	movs	r0, #3
}
 8001562:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001564:	01ffffff 	.word	0x01ffffff

08001568 <HAL_UART_Init>:
{
 8001568:	b510      	push	{r4, lr}
 800156a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800156c:	d101      	bne.n	8001572 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800156e:	2001      	movs	r0, #1
}
 8001570:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001572:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001574:	2b00      	cmp	r3, #0
 8001576:	d104      	bne.n	8001582 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001578:	0002      	movs	r2, r0
 800157a:	3270      	adds	r2, #112	; 0x70
 800157c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800157e:	f000 fb53 	bl	8001c28 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001582:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001584:	2101      	movs	r1, #1
 8001586:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001588:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800158a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800158c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800158e:	438b      	bics	r3, r1
 8001590:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001592:	f7ff fe07 	bl	80011a4 <UART_SetConfig>
 8001596:	2801      	cmp	r0, #1
 8001598:	d0e9      	beq.n	800156e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800159a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80015a0:	0020      	movs	r0, r4
 80015a2:	f7ff fe97 	bl	80012d4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	4907      	ldr	r1, [pc, #28]	; (80015c8 <HAL_UART_Init+0x60>)
 80015aa:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80015ac:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80015ae:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80015b0:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80015b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	438a      	bics	r2, r1
 80015b8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80015ba:	2201      	movs	r2, #1
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80015c2:	f7ff ffa1 	bl	8001508 <UART_CheckIdleState>
 80015c6:	e7d3      	b.n	8001570 <HAL_UART_Init+0x8>
 80015c8:	fffff7ff 	.word	0xfffff7ff

080015cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ce:	2410      	movs	r4, #16
{
 80015d0:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	2230      	movs	r2, #48	; 0x30
 80015d4:	2100      	movs	r1, #0
 80015d6:	a808      	add	r0, sp, #32
 80015d8:	f000 fbe7 	bl	8001daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	0022      	movs	r2, r4
 80015de:	2100      	movs	r1, #0
 80015e0:	4668      	mov	r0, sp
 80015e2:	f000 fbe2 	bl	8001daa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e6:	0022      	movs	r2, r4
 80015e8:	2100      	movs	r1, #0
 80015ea:	a804      	add	r0, sp, #16
 80015ec:	f000 fbdd 	bl	8001daa <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f0:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f2:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f4:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f6:	a808      	add	r0, sp, #32
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015f8:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015fa:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fc:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fe:	f7fe ff8b 	bl	8000518 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001602:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001604:	0021      	movs	r1, r4
 8001606:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001608:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800160a:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160e:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001610:	f7ff f9b6 	bl	8000980 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001616:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001618:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161a:	f7ff fa45 	bl	8000aa8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800161e:	b015      	add	sp, #84	; 0x54
 8001620:	bd30      	pop	{r4, r5, pc}

08001622 <HAL_TIM_IC_CaptureCallback>:
		//sinal do ldr 2
		if(htim->Channel==TIM_CHANNEL_2){

		}
	}
}
 8001622:	4770      	bx	lr

08001624 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance==TIM14){
 8001626:	6802      	ldr	r2, [r0, #0]
 8001628:	4b5c      	ldr	r3, [pc, #368]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x178>)
 800162a:	429a      	cmp	r2, r3
 800162c:	d147      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
		ldr1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7); // porta 13
 800162e:	2090      	movs	r0, #144	; 0x90
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	05c0      	lsls	r0, r0, #23
 8001634:	f7fe ff64 	bl	8000500 <HAL_GPIO_ReadPin>
 8001638:	4c59      	ldr	r4, [pc, #356]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
		ldr2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6); // porta 12
 800163a:	2140      	movs	r1, #64	; 0x40
		ldr1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7); // porta 13
 800163c:	6020      	str	r0, [r4, #0]
		ldr2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6); // porta 12
 800163e:	2090      	movs	r0, #144	; 0x90
 8001640:	05c0      	lsls	r0, r0, #23
 8001642:	f7fe ff5d 	bl	8000500 <HAL_GPIO_ReadPin>
 8001646:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001648:	0005      	movs	r5, r0
 800164a:	6018      	str	r0, [r3, #0]

		// verifica se o carro está parado no s1 fechado e sem carro no s2
		if(ldr2 == 1 && sem_fechado == 1 && ldr1 == 0){
 800164c:	2801      	cmp	r0, #1
 800164e:	d15a      	bne.n	8001706 <HAL_TIM_PeriodElapsedCallback+0xe2>
 8001650:	4f55      	ldr	r7, [pc, #340]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001652:	683e      	ldr	r6, [r7, #0]
 8001654:	2e01      	cmp	r6, #1
 8001656:	d144      	bne.n	80016e2 <HAL_TIM_PeriodElapsedCallback+0xbe>
 8001658:	6824      	ldr	r4, [r4, #0]
 800165a:	2c00      	cmp	r4, #0
 800165c:	d130      	bne.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0x9c>
			// fechando o s2
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET); // liga amarelo S2
 800165e:	2090      	movs	r0, #144	; 0x90
 8001660:	0032      	movs	r2, r6
 8001662:	2104      	movs	r1, #4
 8001664:	05c0      	lsls	r0, r0, #23
 8001666:	f7fe ff51 	bl	800050c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET); // desliga verde S2
 800166a:	2090      	movs	r0, #144	; 0x90
 800166c:	0022      	movs	r2, r4
 800166e:	2108      	movs	r1, #8
 8001670:	05c0      	lsls	r0, r0, #23
 8001672:	f7fe ff4b 	bl	800050c <HAL_GPIO_WritePin>
			// HAL_Delay(500);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // liga vermelho S2
 8001676:	2090      	movs	r0, #144	; 0x90
 8001678:	0032      	movs	r2, r6
 800167a:	2102      	movs	r1, #2
 800167c:	05c0      	lsls	r0, r0, #23
 800167e:	f7fe ff45 	bl	800050c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // desliga amarelo S2
 8001682:	2090      	movs	r0, #144	; 0x90
 8001684:	0022      	movs	r2, r4
 8001686:	2104      	movs	r1, #4
 8001688:	05c0      	lsls	r0, r0, #23
 800168a:	f7fe ff3f 	bl	800050c <HAL_GPIO_WritePin>
			// HAL_Delay(500);
			// abrindo o s1
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET); // deslida vermelho S1
 800168e:	0022      	movs	r2, r4
 8001690:	0031      	movs	r1, r6
 8001692:	4846      	ldr	r0, [pc, #280]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001694:	f7fe ff3a 	bl	800050c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // liga verde S1
 8001698:	2090      	movs	r0, #144	; 0x90
 800169a:	0032      	movs	r2, r6
 800169c:	0031      	movs	r1, r6
 800169e:	05c0      	lsls	r0, r0, #23
 80016a0:	f7fe ff34 	bl	800050c <HAL_GPIO_WritePin>
			sem_fechado = 2;
 80016a4:	2302      	movs	r3, #2
			fecha_sem = 1;
			if (contou == 0) {
 80016a6:	4a42      	ldr	r2, [pc, #264]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
			sem_fechado = 2;
 80016a8:	603b      	str	r3, [r7, #0]
			fecha_sem = 1;
 80016aa:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80016ac:	601e      	str	r6, [r3, #0]
			if (contou == 0) {
 80016ae:	6813      	ldr	r3, [r2, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d104      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
				conta_carro1 = conta_carro1 + 1;
 80016b4:	4940      	ldr	r1, [pc, #256]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x194>)
				contou = 1;
 80016b6:	6016      	str	r6, [r2, #0]
				conta_carro1 = conta_carro1 + 1;
 80016b8:	680b      	ldr	r3, [r1, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	600b      	str	r3, [r1, #0]
				contou = 1;
			}
		}

	}
}
 80016be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (ldr2 == 1 && sem_fechado == 1 && ldr1 == 1) {
 80016c0:	2c01      	cmp	r4, #1
 80016c2:	d1fc      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
			if (contou == 0) {
 80016c4:	4a3a      	ldr	r2, [pc, #232]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f8      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
				conta_carro1 = conta_carro1 + 1;
 80016cc:	493a      	ldr	r1, [pc, #232]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80016ce:	680b      	ldr	r3, [r1, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	600b      	str	r3, [r1, #0]
				conta_carro2 = conta_carro2 + 1;
 80016d4:	4939      	ldr	r1, [pc, #228]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x198>)
 80016d6:	680b      	ldr	r3, [r1, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	600b      	str	r3, [r1, #0]
				contou = 1;
 80016dc:	2301      	movs	r3, #1
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	e7ed      	b.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
		} else if (ldr2 == 1 && sem_fechado == 2 && ldr1 == 0) {
 80016e2:	2e02      	cmp	r6, #2
 80016e4:	d1eb      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <HAL_TIM_PeriodElapsedCallback+0xdc>
			if (contou == 0) {
 80016ec:	4a30      	ldr	r2, [pc, #192]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80016ee:	6813      	ldr	r3, [r2, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e4      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
				conta_carro1 = conta_carro1 + 1;
 80016f4:	4930      	ldr	r1, [pc, #192]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x194>)
				contou = 1;
 80016f6:	6010      	str	r0, [r2, #0]
				conta_carro1 = conta_carro1 + 1;
 80016f8:	680b      	ldr	r3, [r1, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	600b      	str	r3, [r1, #0]
 80016fe:	e7de      	b.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
		} else if (ldr2 == 1 && sem_fechado == 2 && ldr1 == 1) {
 8001700:	2b01      	cmp	r3, #1
 8001702:	d1dc      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001704:	e7de      	b.n	80016c4 <HAL_TIM_PeriodElapsedCallback+0xa0>
		} else if (ldr2 == 0 && sem_fechado == 1 && ldr1 == 0) {
 8001706:	2800      	cmp	r0, #0
 8001708:	d1d9      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
 800170a:	4f27      	ldr	r7, [pc, #156]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800170c:	683e      	ldr	r6, [r7, #0]
 800170e:	2e01      	cmp	r6, #1
 8001710:	d10e      	bne.n	8001730 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0d2      	beq.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
		} else if (ldr2 == 0 && sem_fechado == 1 && ldr1 == 1) {
 8001718:	2b01      	cmp	r3, #1
 800171a:	d1d0      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
			if (contou == 0) {
 800171c:	4924      	ldr	r1, [pc, #144]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800171e:	680a      	ldr	r2, [r1, #0]
 8001720:	2a00      	cmp	r2, #0
 8001722:	d1cc      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
				conta_carro2 = conta_carro2 + 1;
 8001724:	4825      	ldr	r0, [pc, #148]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x198>)
				contou = 1;
 8001726:	600b      	str	r3, [r1, #0]
				conta_carro2 = conta_carro2 + 1;
 8001728:	6802      	ldr	r2, [r0, #0]
 800172a:	3201      	adds	r2, #1
 800172c:	6002      	str	r2, [r0, #0]
 800172e:	e7c6      	b.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
		} else if (ldr2 == 0 && sem_fechado == 2 && ldr1 == 0) {
 8001730:	2e02      	cmp	r6, #2
 8001732:	d1c4      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001734:	6824      	ldr	r4, [r4, #0]
 8001736:	2c00      	cmp	r4, #0
 8001738:	d0c1      	beq.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
		} else if (ldr2 == 0 && sem_fechado == 2 && ldr1 == 1) {
 800173a:	2c01      	cmp	r4, #1
 800173c:	d1bf      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
			HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1,GPIO_PIN_SET); // liga amarelo S1
 800173e:	0022      	movs	r2, r4
 8001740:	0031      	movs	r1, r6
 8001742:	481a      	ldr	r0, [pc, #104]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001744:	f7fe fee2 	bl	800050c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET); // desliga verde S1
 8001748:	2090      	movs	r0, #144	; 0x90
 800174a:	002a      	movs	r2, r5
 800174c:	0021      	movs	r1, r4
 800174e:	05c0      	lsls	r0, r0, #23
 8001750:	f7fe fedc 	bl	800050c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF,GPIO_PIN_0,GPIO_PIN_SET); // liga vermelho S1
 8001754:	0022      	movs	r2, r4
 8001756:	0021      	movs	r1, r4
 8001758:	4814      	ldr	r0, [pc, #80]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x188>)
 800175a:	f7fe fed7 	bl	800050c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1,GPIO_PIN_RESET); // desliga amarelo S1
 800175e:	002a      	movs	r2, r5
 8001760:	0031      	movs	r1, r6
 8001762:	4812      	ldr	r0, [pc, #72]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001764:	f7fe fed2 	bl	800050c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET); // desliga vermelho S2
 8001768:	2090      	movs	r0, #144	; 0x90
 800176a:	002a      	movs	r2, r5
 800176c:	0031      	movs	r1, r6
 800176e:	05c0      	lsls	r0, r0, #23
 8001770:	f7fe fecc 	bl	800050c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET); // liga verde S2
 8001774:	2090      	movs	r0, #144	; 0x90
 8001776:	0022      	movs	r2, r4
 8001778:	2108      	movs	r1, #8
 800177a:	05c0      	lsls	r0, r0, #23
 800177c:	f7fe fec6 	bl	800050c <HAL_GPIO_WritePin>
			fecha_sem = 2;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x190>)
			if (contou == 0) {
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
			fecha_sem = 2;
 8001784:	601e      	str	r6, [r3, #0]
			if (contou == 0) {
 8001786:	6813      	ldr	r3, [r2, #0]
			sem_fechado = 1;
 8001788:	603c      	str	r4, [r7, #0]
			if (contou == 0) {
 800178a:	2b00      	cmp	r3, #0
 800178c:	d197      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
				conta_carro2 = conta_carro2 + 1;
 800178e:	490b      	ldr	r1, [pc, #44]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x198>)
				contou = 1;
 8001790:	6014      	str	r4, [r2, #0]
				conta_carro2 = conta_carro2 + 1;
 8001792:	680b      	ldr	r3, [r1, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	600b      	str	r3, [r1, #0]
}
 8001798:	e791      	b.n	80016be <HAL_TIM_PeriodElapsedCallback+0x9a>
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	40002000 	.word	0x40002000
 80017a0:	20000040 	.word	0x20000040
 80017a4:	20000044 	.word	0x20000044
 80017a8:	2000000c 	.word	0x2000000c
 80017ac:	48001400 	.word	0x48001400
 80017b0:	20000038 	.word	0x20000038
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000030 	.word	0x20000030
 80017bc:	20000034 	.word	0x20000034

080017c0 <fecha_semaforo>:


void fecha_semaforo(int semaforo) {
 80017c0:	b510      	push	{r4, lr}
 80017c2:	0004      	movs	r4, r0
	if(semaforo == 1) {
 80017c4:	2801      	cmp	r0, #1
 80017c6:	d12c      	bne.n	8001822 <fecha_semaforo+0x62>
	//5 segundos de transição do verde para vermelho
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1,GPIO_PIN_SET); // liga amarelo S1
 80017c8:	0002      	movs	r2, r0
 80017ca:	2102      	movs	r1, #2
 80017cc:	482c      	ldr	r0, [pc, #176]	; (8001880 <fecha_semaforo+0xc0>)
 80017ce:	f7fe fe9d 	bl	800050c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET); // desliga verde S1
 80017d2:	2090      	movs	r0, #144	; 0x90
 80017d4:	2200      	movs	r2, #0
 80017d6:	0021      	movs	r1, r4
 80017d8:	05c0      	lsls	r0, r0, #23
 80017da:	f7fe fe97 	bl	800050c <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 80017de:	4829      	ldr	r0, [pc, #164]	; (8001884 <fecha_semaforo+0xc4>)
 80017e0:	f7fe fd76 	bl	80002d0 <HAL_Delay>
		// Fecha semaforo 1
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_0,GPIO_PIN_SET); // liga vermelho S1
 80017e4:	0022      	movs	r2, r4
 80017e6:	0021      	movs	r1, r4
 80017e8:	4825      	ldr	r0, [pc, #148]	; (8001880 <fecha_semaforo+0xc0>)
 80017ea:	f7fe fe8f 	bl	800050c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1,GPIO_PIN_RESET); // desliga amarelo S1
 80017ee:	2200      	movs	r2, #0
 80017f0:	2102      	movs	r1, #2
 80017f2:	4823      	ldr	r0, [pc, #140]	; (8001880 <fecha_semaforo+0xc0>)
 80017f4:	f7fe fe8a 	bl	800050c <HAL_GPIO_WritePin>
		// Delay com ambos os semaforos em vermelho
		HAL_Delay(3000);
 80017f8:	4822      	ldr	r0, [pc, #136]	; (8001884 <fecha_semaforo+0xc4>)
 80017fa:	f7fe fd69 	bl	80002d0 <HAL_Delay>
		// Abre o semaforo 2
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET); // desliga vermelho S2
 80017fe:	2090      	movs	r0, #144	; 0x90
 8001800:	2200      	movs	r2, #0
 8001802:	2102      	movs	r1, #2
 8001804:	05c0      	lsls	r0, r0, #23
 8001806:	f7fe fe81 	bl	800050c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET); // liga verde S2
 800180a:	2090      	movs	r0, #144	; 0x90
 800180c:	0022      	movs	r2, r4
 800180e:	2108      	movs	r1, #8
 8001810:	05c0      	lsls	r0, r0, #23
 8001812:	f7fe fe7b 	bl	800050c <HAL_GPIO_WritePin>
		sem_fechado = 1;
		fecha_sem = 2;
 8001816:	2202      	movs	r2, #2
		sem_fechado = 1;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <fecha_semaforo+0xc8>)
 800181a:	601c      	str	r4, [r3, #0]
		HAL_Delay(3000);
		// Abre o semaforo 1
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET); // deslida vermelho S1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // liga verde S1
		sem_fechado = 2;
		fecha_sem = 1;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <fecha_semaforo+0xcc>)
 800181e:	601a      	str	r2, [r3, #0]
	}
}
 8001820:	bd10      	pop	{r4, pc}
	} else if(semaforo == 2) {
 8001822:	2802      	cmp	r0, #2
 8001824:	d1fc      	bne.n	8001820 <fecha_semaforo+0x60>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET); // liga amarelo S2
 8001826:	2090      	movs	r0, #144	; 0x90
 8001828:	2201      	movs	r2, #1
 800182a:	2104      	movs	r1, #4
 800182c:	05c0      	lsls	r0, r0, #23
 800182e:	f7fe fe6d 	bl	800050c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET); // desliga verde S2
 8001832:	2090      	movs	r0, #144	; 0x90
 8001834:	2200      	movs	r2, #0
 8001836:	2108      	movs	r1, #8
 8001838:	05c0      	lsls	r0, r0, #23
 800183a:	f7fe fe67 	bl	800050c <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 800183e:	4811      	ldr	r0, [pc, #68]	; (8001884 <fecha_semaforo+0xc4>)
 8001840:	f7fe fd46 	bl	80002d0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // liga vermelho S2
 8001844:	2090      	movs	r0, #144	; 0x90
 8001846:	2201      	movs	r2, #1
 8001848:	0021      	movs	r1, r4
 800184a:	05c0      	lsls	r0, r0, #23
 800184c:	f7fe fe5e 	bl	800050c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // desliga amarelo S2
 8001850:	2090      	movs	r0, #144	; 0x90
 8001852:	2200      	movs	r2, #0
 8001854:	2104      	movs	r1, #4
 8001856:	05c0      	lsls	r0, r0, #23
 8001858:	f7fe fe58 	bl	800050c <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 800185c:	4809      	ldr	r0, [pc, #36]	; (8001884 <fecha_semaforo+0xc4>)
 800185e:	f7fe fd37 	bl	80002d0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET); // deslida vermelho S1
 8001862:	2200      	movs	r2, #0
 8001864:	2101      	movs	r1, #1
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <fecha_semaforo+0xc0>)
 8001868:	f7fe fe50 	bl	800050c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // liga verde S1
 800186c:	2201      	movs	r2, #1
 800186e:	2090      	movs	r0, #144	; 0x90
 8001870:	0011      	movs	r1, r2
 8001872:	05c0      	lsls	r0, r0, #23
 8001874:	f7fe fe4a 	bl	800050c <HAL_GPIO_WritePin>
		sem_fechado = 2;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <fecha_semaforo+0xc8>)
		fecha_sem = 1;
 800187a:	2201      	movs	r2, #1
		sem_fechado = 2;
 800187c:	601c      	str	r4, [r3, #0]
 800187e:	e7cd      	b.n	800181c <fecha_semaforo+0x5c>
 8001880:	48001400 	.word	0x48001400
 8001884:	00000bb8 	.word	0x00000bb8
 8001888:	2000000c 	.word	0x2000000c
 800188c:	20000008 	.word	0x20000008

08001890 <main>:
{
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	b0b9      	sub	sp, #228	; 0xe4
  HAL_Init();
 8001894:	f7fe fcfa 	bl	800028c <HAL_Init>
  SystemClock_Config();
 8001898:	f7ff fe98 	bl	80015cc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	2214      	movs	r2, #20
 800189e:	2100      	movs	r1, #0
 80018a0:	a81f      	add	r0, sp, #124	; 0x7c
 80018a2:	f000 fa82 	bl	8001daa <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	4f99      	ldr	r7, [pc, #612]	; (8001b10 <main+0x280>)
 80018aa:	03c9      	lsls	r1, r1, #15
 80018ac:	697a      	ldr	r2, [r7, #20]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80018ae:	4899      	ldr	r0, [pc, #612]	; (8001b14 <main+0x284>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b0:	430a      	orrs	r2, r1
 80018b2:	617a      	str	r2, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b8:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	0289      	lsls	r1, r1, #10
 80018c4:	430a      	orrs	r2, r1
 80018c6:	617a      	str	r2, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	400b      	ands	r3, r1
 80018ce:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80018d0:	2103      	movs	r1, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80018d4:	f7fe fe1a 	bl	800050c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80018d8:	2090      	movs	r0, #144	; 0x90
 80018da:	2200      	movs	r2, #0
 80018dc:	210f      	movs	r1, #15
 80018de:	05c0      	lsls	r0, r0, #23
 80018e0:	f7fe fe14 	bl	800050c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018e6:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018e8:	a91f      	add	r1, sp, #124	; 0x7c
 80018ea:	488a      	ldr	r0, [pc, #552]	; (8001b14 <main+0x284>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018ec:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	9620      	str	r6, [sp, #128]	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	9421      	str	r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	9422      	str	r4, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018f4:	f7fe fd54 	bl	80003a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80018fa:	230f      	movs	r3, #15
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	a91f      	add	r1, sp, #124	; 0x7c
 80018fe:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001900:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	9620      	str	r6, [sp, #128]	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	9421      	str	r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	9422      	str	r4, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f7fe fd4a 	bl	80003a0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800190e:	2320      	movs	r3, #32
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	a91f      	add	r1, sp, #124	; 0x7c
 8001912:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001914:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	9422      	str	r4, [sp, #136]	; 0x88
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f7fe fd40 	bl	80003a0 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001920:	2210      	movs	r2, #16
 8001922:	0021      	movs	r1, r4
 8001924:	a806      	add	r0, sp, #24
 8001926:	f000 fa40 	bl	8001daa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192a:	2208      	movs	r2, #8
 800192c:	0021      	movs	r1, r4
 800192e:	a804      	add	r0, sp, #16
 8001930:	f000 fa3b 	bl	8001daa <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001934:	2210      	movs	r2, #16
 8001936:	0021      	movs	r1, r4
 8001938:	a81f      	add	r0, sp, #124	; 0x7c
 800193a:	f000 fa36 	bl	8001daa <memset>
  htim3.Instance = TIM3;
 800193e:	4d76      	ldr	r5, [pc, #472]	; (8001b18 <main+0x288>)
 8001940:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <main+0x28c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001942:	0028      	movs	r0, r5
  htim3.Instance = TIM3;
 8001944:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 31;
 8001946:	231f      	movs	r3, #31
 8001948:	606b      	str	r3, [r5, #4]
  htim3.Init.Period = 60000;
 800194a:	4b75      	ldr	r3, [pc, #468]	; (8001b20 <main+0x290>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 60000;
 800194e:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001950:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001952:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001954:	f7ff fa24 	bl	8000da0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001958:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800195a:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195c:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800195e:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001960:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001962:	f7ff fb21 	bl	8000fa8 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001966:	0028      	movs	r0, r5
 8001968:	f7ff fa35 	bl	8000dd6 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800196c:	a904      	add	r1, sp, #16
 800196e:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001974:	f7ff fbea 	bl	800114c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001978:	2302      	movs	r3, #2
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800197a:	0022      	movs	r2, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800197c:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800197e:	a91f      	add	r1, sp, #124	; 0x7c
  sConfigIC.ICFilter = 15;
 8001980:	330d      	adds	r3, #13
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001982:	0028      	movs	r0, r5
  sConfigIC.ICFilter = 15;
 8001984:	9322      	str	r3, [sp, #136]	; 0x88
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001986:	9620      	str	r6, [sp, #128]	; 0x80
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001988:	9421      	str	r4, [sp, #132]	; 0x84
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800198a:	f7ff fa63 	bl	8000e54 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800198e:	2204      	movs	r2, #4
 8001990:	a91f      	add	r1, sp, #124	; 0x7c
 8001992:	0028      	movs	r0, r5
 8001994:	f7ff fa5e 	bl	8000e54 <HAL_TIM_IC_ConfigChannel>
  huart1.Instance = USART1;
 8001998:	4862      	ldr	r0, [pc, #392]	; (8001b24 <main+0x294>)
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <main+0x298>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800199c:	6084      	str	r4, [r0, #8]
  huart1.Instance = USART1;
 800199e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80019a0:	2396      	movs	r3, #150	; 0x96
 80019a2:	019b      	lsls	r3, r3, #6
 80019a4:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a6:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019a8:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019aa:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ac:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b2:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b4:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019b6:	f7ff fdd7 	bl	8001568 <HAL_UART_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ba:	697b      	ldr	r3, [r7, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80019bc:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019be:	4333      	orrs	r3, r6
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697b      	ldr	r3, [r7, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80019c4:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019c6:	4033      	ands	r3, r6
 80019c8:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80019ca:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019cc:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80019ce:	f7fe fc91 	bl	80002f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80019d2:	200a      	movs	r0, #10
 80019d4:	f7fe fcbe 	bl	8000354 <HAL_NVIC_EnableIRQ>
  htim14.Instance = TIM14;
 80019d8:	4f54      	ldr	r7, [pc, #336]	; (8001b2c <main+0x29c>)
 80019da:	4b55      	ldr	r3, [pc, #340]	; (8001b30 <main+0x2a0>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80019dc:	0038      	movs	r0, r7
  htim14.Instance = TIM14;
 80019de:	603b      	str	r3, [r7, #0]
  htim14.Init.Prescaler = 31999;
 80019e0:	4b54      	ldr	r3, [pc, #336]	; (8001b34 <main+0x2a4>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	60bc      	str	r4, [r7, #8]
  htim14.Init.Prescaler = 31999;
 80019e4:	607b      	str	r3, [r7, #4]
  htim14.Init.Period = 99;
 80019e6:	2363      	movs	r3, #99	; 0x63
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e8:	613c      	str	r4, [r7, #16]
  htim14.Init.Period = 99;
 80019ea:	60fb      	str	r3, [r7, #12]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ec:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80019ee:	f7ff f9d7 	bl	8000da0 <HAL_TIM_Base_Init>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // ldr 1
 80019f2:	0021      	movs	r1, r4
 80019f4:	0028      	movs	r0, r5
 80019f6:	f7ff fb7a 	bl	80010ee <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // ldr 2
 80019fa:	2104      	movs	r1, #4
 80019fc:	0028      	movs	r0, r5
 80019fe:	f7ff fb76 	bl	80010ee <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8001a02:	0038      	movs	r0, r7
 8001a04:	f7ff f8d4 	bl	8000bb0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET); // liga o led vermelho do s1
 8001a08:	0032      	movs	r2, r6
 8001a0a:	0031      	movs	r1, r6
 8001a0c:	4841      	ldr	r0, [pc, #260]	; (8001b14 <main+0x284>)
 8001a0e:	f7fe fd7d 	bl	800050c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET); // desliga o led amarelo do s1
 8001a12:	0022      	movs	r2, r4
 8001a14:	2102      	movs	r1, #2
 8001a16:	483f      	ldr	r0, [pc, #252]	; (8001b14 <main+0x284>)
 8001a18:	f7fe fd78 	bl	800050c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // desliga o led verde do s1
 8001a1c:	2090      	movs	r0, #144	; 0x90
 8001a1e:	0022      	movs	r2, r4
 8001a20:	0031      	movs	r1, r6
 8001a22:	05c0      	lsls	r0, r0, #23
 8001a24:	f7fe fd72 	bl	800050c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // desliga o led vermelho do s2
 8001a28:	2090      	movs	r0, #144	; 0x90
 8001a2a:	0022      	movs	r2, r4
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	05c0      	lsls	r0, r0, #23
 8001a30:	f7fe fd6c 	bl	800050c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // desliga o led amarelo do s2
 8001a34:	2090      	movs	r0, #144	; 0x90
 8001a36:	0022      	movs	r2, r4
 8001a38:	2104      	movs	r1, #4
 8001a3a:	05c0      	lsls	r0, r0, #23
 8001a3c:	f7fe fd66 	bl	800050c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // liga o led verde do s2
 8001a40:	2090      	movs	r0, #144	; 0x90
	  		   HAL_UART_Transmit(&huart1, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 8001a42:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // liga o led verde do s2
 8001a44:	0032      	movs	r2, r6
 8001a46:	2108      	movs	r1, #8
 8001a48:	05c0      	lsls	r0, r0, #23
 8001a4a:	f7fe fd5f 	bl	800050c <HAL_GPIO_WritePin>
	  		   HAL_UART_Transmit(&huart1, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 8001a4e:	426d      	negs	r5, r5
	  			  count_time = 0;
 8001a50:	9401      	str	r4, [sp, #4]
	  if(sem_fechado != fecha_sem){
 8001a52:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <main+0x2a8>)
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <main+0x2ac>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4283      	cmp	r3, r0
 8001a5c:	d004      	beq.n	8001a68 <main+0x1d8>
	  			  fecha_semaforo(fecha_sem);
 8001a5e:	f7ff feaf 	bl	80017c0 <fecha_semaforo>
	  			  count_time = 0;
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <main+0x2b0>)
 8001a64:	9a01      	ldr	r2, [sp, #4]
 8001a66:	601a      	str	r2, [r3, #0]
	  		  HAL_Delay(4000);
 8001a68:	20fa      	movs	r0, #250	; 0xfa
 8001a6a:	0100      	lsls	r0, r0, #4
 8001a6c:	f7fe fc30 	bl	80002d0 <HAL_Delay>
	  		  itoa(conta_carro1, sconta_carro1, 10);
 8001a70:	4f34      	ldr	r7, [pc, #208]	; (8001b44 <main+0x2b4>)
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <main+0x2b8>)
 8001a74:	220a      	movs	r2, #10
 8001a76:	0039      	movs	r1, r7
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	f000 f989 	bl	8001d90 <itoa>
	  		  itoa(conta_carro2, sconta_carro2, 10);
 8001a7e:	4b33      	ldr	r3, [pc, #204]	; (8001b4c <main+0x2bc>)
 8001a80:	4e33      	ldr	r6, [pc, #204]	; (8001b50 <main+0x2c0>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	220a      	movs	r2, #10
 8001a86:	0031      	movs	r1, r6
 8001a88:	f000 f982 	bl	8001d90 <itoa>
	  		  char msg1[100] = "Número de atualizações do sinal 1:";
 8001a8c:	4c31      	ldr	r4, [pc, #196]	; (8001b54 <main+0x2c4>)
 8001a8e:	2226      	movs	r2, #38	; 0x26
 8001a90:	0021      	movs	r1, r4
 8001a92:	a806      	add	r0, sp, #24
 8001a94:	f000 f980 	bl	8001d98 <memcpy>
 8001a98:	2036      	movs	r0, #54	; 0x36
 8001a9a:	ab02      	add	r3, sp, #8
 8001a9c:	18c0      	adds	r0, r0, r3
 8001a9e:	223e      	movs	r2, #62	; 0x3e
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	f000 f982 	bl	8001daa <memset>
	  		  char msg2[100] = "Número de atualizações do sinal 2:";
 8001aa6:	0021      	movs	r1, r4
 8001aa8:	2226      	movs	r2, #38	; 0x26
 8001aaa:	3164      	adds	r1, #100	; 0x64
 8001aac:	a81f      	add	r0, sp, #124	; 0x7c
 8001aae:	f000 f973 	bl	8001d98 <memcpy>
 8001ab2:	209a      	movs	r0, #154	; 0x9a
 8001ab4:	ab02      	add	r3, sp, #8
 8001ab6:	223e      	movs	r2, #62	; 0x3e
 8001ab8:	18c0      	adds	r0, r0, r3
 8001aba:	2100      	movs	r1, #0
 8001abc:	f000 f975 	bl	8001daa <memset>
	  		  strcat(msg1, sconta_carro1);
 8001ac0:	0039      	movs	r1, r7
 8001ac2:	a806      	add	r0, sp, #24
 8001ac4:	f000 f979 	bl	8001dba <strcat>
	  		  strcat(msg2, sconta_carro2);
 8001ac8:	0031      	movs	r1, r6
 8001aca:	a81f      	add	r0, sp, #124	; 0x7c
 8001acc:	f000 f975 	bl	8001dba <strcat>
	  		  strcat(msg1, "\n");
 8001ad0:	4c21      	ldr	r4, [pc, #132]	; (8001b58 <main+0x2c8>)
 8001ad2:	a806      	add	r0, sp, #24
 8001ad4:	0021      	movs	r1, r4
 8001ad6:	f000 f970 	bl	8001dba <strcat>
	  		  strcat(msg2, "\n");
 8001ada:	0021      	movs	r1, r4
 8001adc:	a81f      	add	r0, sp, #124	; 0x7c
 8001ade:	f000 f96c 	bl	8001dba <strcat>
	  		   HAL_UART_Transmit(&huart1, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 8001ae2:	a806      	add	r0, sp, #24
 8001ae4:	f7fe fb10 	bl	8000108 <strlen>
 8001ae8:	4c0e      	ldr	r4, [pc, #56]	; (8001b24 <main+0x294>)
 8001aea:	b282      	uxth	r2, r0
 8001aec:	002b      	movs	r3, r5
 8001aee:	a906      	add	r1, sp, #24
 8001af0:	0020      	movs	r0, r4
 8001af2:	f7ff fc9f 	bl	8001434 <HAL_UART_Transmit>
	  		   HAL_UART_Transmit(&huart1, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 8001af6:	a81f      	add	r0, sp, #124	; 0x7c
 8001af8:	f7fe fb06 	bl	8000108 <strlen>
 8001afc:	002b      	movs	r3, r5
 8001afe:	b282      	uxth	r2, r0
 8001b00:	a91f      	add	r1, sp, #124	; 0x7c
 8001b02:	0020      	movs	r0, r4
 8001b04:	f7ff fc96 	bl	8001434 <HAL_UART_Transmit>
	  		  contou = 0;
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <main+0x2cc>)
 8001b0a:	9a01      	ldr	r2, [sp, #4]
 8001b0c:	601a      	str	r2, [r3, #0]
  {
 8001b0e:	e7a0      	b.n	8001a52 <main+0x1c2>
 8001b10:	40021000 	.word	0x40021000
 8001b14:	48001400 	.word	0x48001400
 8001b18:	2000004c 	.word	0x2000004c
 8001b1c:	40000400 	.word	0x40000400
 8001b20:	0000ea60 	.word	0x0000ea60
 8001b24:	20000114 	.word	0x20000114
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	200001a0 	.word	0x200001a0
 8001b30:	40002000 	.word	0x40002000
 8001b34:	00007cff 	.word	0x00007cff
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	2000000c 	.word	0x2000000c
 8001b40:	2000003c 	.word	0x2000003c
 8001b44:	20000199 	.word	0x20000199
 8001b48:	20000030 	.word	0x20000030
 8001b4c:	20000034 	.word	0x20000034
 8001b50:	20000194 	.word	0x20000194
 8001b54:	08001e80 	.word	0x08001e80
 8001b58:	08001f4c 	.word	0x08001f4c
 8001b5c:	20000038 	.word	0x20000038

08001b60 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b60:	2001      	movs	r0, #1
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_MspInit+0x2c>)
{
 8001b64:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	6999      	ldr	r1, [r3, #24]
 8001b68:	4301      	orrs	r1, r0
 8001b6a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b70:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	4002      	ands	r2, r0
 8001b74:	9200      	str	r2, [sp, #0]
 8001b76:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	61da      	str	r2, [r3, #28]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	400b      	ands	r3, r1
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b86:	b002      	add	sp, #8
 8001b88:	4770      	bx	lr
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	40021000 	.word	0x40021000

08001b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b90:	b510      	push	{r4, lr}
 8001b92:	0004      	movs	r4, r0
 8001b94:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b96:	2214      	movs	r2, #20
 8001b98:	2100      	movs	r1, #0
 8001b9a:	a803      	add	r0, sp, #12
 8001b9c:	f000 f905 	bl	8001daa <memset>
  if(htim_base->Instance==TIM3)
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <HAL_TIM_Base_MspInit+0x8c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d125      	bne.n	8001bf4 <HAL_TIM_Base_MspInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ba8:	2002      	movs	r0, #2
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_TIM_Base_MspInit+0x90>)
 8001bac:	69d9      	ldr	r1, [r3, #28]
 8001bae:	4301      	orrs	r1, r0
 8001bb0:	61d9      	str	r1, [r3, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bb4:	69da      	ldr	r2, [r3, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	0289      	lsls	r1, r1, #10
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bb8:	4002      	ands	r2, r0
 8001bba:	9200      	str	r2, [sp, #0]
 8001bbc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	615a      	str	r2, [r3, #20]
 8001bc6:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	400b      	ands	r3, r1
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd0:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd6:	3bbf      	subs	r3, #191	; 0xbf
 8001bd8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001bda:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f7fe fbe0 	bl	80003a0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2010      	movs	r0, #16
 8001be4:	0011      	movs	r1, r2
 8001be6:	f7fe fb85 	bl	80002f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bea:	2010      	movs	r0, #16
  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001bec:	f7fe fbb2 	bl	8000354 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001bf0:	b008      	add	sp, #32
 8001bf2:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM14)
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <HAL_TIM_Base_MspInit+0x94>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d1fa      	bne.n	8001bf0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001bfa:	2080      	movs	r0, #128	; 0x80
 8001bfc:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_TIM_Base_MspInit+0x90>)
 8001bfe:	0040      	lsls	r0, r0, #1
 8001c00:	69d1      	ldr	r1, [r2, #28]
 8001c02:	4301      	orrs	r1, r0
 8001c04:	61d1      	str	r1, [r2, #28]
 8001c06:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c0a:	4003      	ands	r3, r0
 8001c0c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001c0e:	38ed      	subs	r0, #237	; 0xed
 8001c10:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c12:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001c14:	f7fe fb6e 	bl	80002f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001c18:	2013      	movs	r0, #19
 8001c1a:	e7e7      	b.n	8001bec <HAL_TIM_Base_MspInit+0x5c>
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40002000 	.word	0x40002000

08001c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	0004      	movs	r4, r0
 8001c2c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	2214      	movs	r2, #20
 8001c30:	2100      	movs	r1, #0
 8001c32:	a803      	add	r0, sp, #12
 8001c34:	f000 f8b9 	bl	8001daa <memset>
  if(huart->Instance==USART1)
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_UART_MspInit+0x60>)
 8001c3a:	6822      	ldr	r2, [r4, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d120      	bne.n	8001c82 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c40:	2080      	movs	r0, #128	; 0x80
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_UART_MspInit+0x64>)
 8001c44:	01c0      	lsls	r0, r0, #7
 8001c46:	6999      	ldr	r1, [r3, #24]
 8001c48:	4301      	orrs	r1, r0
 8001c4a:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4e:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c52:	4002      	ands	r2, r0
 8001c54:	9201      	str	r2, [sp, #4]
 8001c56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	615a      	str	r2, [r3, #20]
 8001c60:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	400b      	ands	r3, r1
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c6a:	23c0      	movs	r3, #192	; 0xc0
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c74:	3301      	adds	r3, #1
 8001c76:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001c7a:	3b02      	subs	r3, #2
 8001c7c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f7fe fb8f 	bl	80003a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c82:	b008      	add	sp, #32
 8001c84:	bd10      	pop	{r4, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	40013800 	.word	0x40013800
 8001c8c:	40021000 	.word	0x40021000

08001c90 <NMI_Handler>:
 8001c90:	4770      	bx	lr

08001c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c92:	e7fe      	b.n	8001c92 <HardFault_Handler>

08001c94 <SVC_Handler>:
 8001c94:	4770      	bx	lr

08001c96 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c96:	4770      	bx	lr

08001c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9a:	f7fe fb07 	bl	80002ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9e:	bd10      	pop	{r4, pc}

08001ca0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ca0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ca2:	4802      	ldr	r0, [pc, #8]	; (8001cac <TIM3_IRQHandler+0xc>)
 8001ca4:	f7fe ff97 	bl	8000bd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ca8:	bd10      	pop	{r4, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	2000004c 	.word	0x2000004c

08001cb0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001cb0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001cb2:	4802      	ldr	r0, [pc, #8]	; (8001cbc <TIM14_IRQHandler+0xc>)
 8001cb4:	f7fe ff8f 	bl	8000bd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001cb8:	bd10      	pop	{r4, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	200001a0 	.word	0x200001a0

08001cc0 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001cc0:	4770      	bx	lr
	...

08001cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cca:	490e      	ldr	r1, [pc, #56]	; (8001d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <LoopForever+0xe>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ce0:	4c0b      	ldr	r4, [pc, #44]	; (8001d10 <LoopForever+0x16>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001cee:	f7ff ffe7 	bl	8001cc0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001cf2:	f000 f811 	bl	8001d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cf6:	f7ff fdcb 	bl	8001890 <main>

08001cfa <LoopForever>:

LoopForever:
    b LoopForever
 8001cfa:	e7fe      	b.n	8001cfa <LoopForever>
  ldr   r0, =_estack
 8001cfc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d04:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001d08:	08001f94 	.word	0x08001f94
  ldr r2, =_sbss
 8001d0c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001d10:	200001e0 	.word	0x200001e0

08001d14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC1_IRQHandler>
	...

08001d18 <__libc_init_array>:
 8001d18:	b570      	push	{r4, r5, r6, lr}
 8001d1a:	2600      	movs	r6, #0
 8001d1c:	4d0c      	ldr	r5, [pc, #48]	; (8001d50 <__libc_init_array+0x38>)
 8001d1e:	4c0d      	ldr	r4, [pc, #52]	; (8001d54 <__libc_init_array+0x3c>)
 8001d20:	1b64      	subs	r4, r4, r5
 8001d22:	10a4      	asrs	r4, r4, #2
 8001d24:	42a6      	cmp	r6, r4
 8001d26:	d109      	bne.n	8001d3c <__libc_init_array+0x24>
 8001d28:	2600      	movs	r6, #0
 8001d2a:	f000 f88d 	bl	8001e48 <_init>
 8001d2e:	4d0a      	ldr	r5, [pc, #40]	; (8001d58 <__libc_init_array+0x40>)
 8001d30:	4c0a      	ldr	r4, [pc, #40]	; (8001d5c <__libc_init_array+0x44>)
 8001d32:	1b64      	subs	r4, r4, r5
 8001d34:	10a4      	asrs	r4, r4, #2
 8001d36:	42a6      	cmp	r6, r4
 8001d38:	d105      	bne.n	8001d46 <__libc_init_array+0x2e>
 8001d3a:	bd70      	pop	{r4, r5, r6, pc}
 8001d3c:	00b3      	lsls	r3, r6, #2
 8001d3e:	58eb      	ldr	r3, [r5, r3]
 8001d40:	4798      	blx	r3
 8001d42:	3601      	adds	r6, #1
 8001d44:	e7ee      	b.n	8001d24 <__libc_init_array+0xc>
 8001d46:	00b3      	lsls	r3, r6, #2
 8001d48:	58eb      	ldr	r3, [r5, r3]
 8001d4a:	4798      	blx	r3
 8001d4c:	3601      	adds	r6, #1
 8001d4e:	e7f2      	b.n	8001d36 <__libc_init_array+0x1e>
 8001d50:	08001f8c 	.word	0x08001f8c
 8001d54:	08001f8c 	.word	0x08001f8c
 8001d58:	08001f8c 	.word	0x08001f8c
 8001d5c:	08001f90 	.word	0x08001f90

08001d60 <__itoa>:
 8001d60:	1e93      	subs	r3, r2, #2
 8001d62:	b510      	push	{r4, lr}
 8001d64:	000c      	movs	r4, r1
 8001d66:	2b22      	cmp	r3, #34	; 0x22
 8001d68:	d904      	bls.n	8001d74 <__itoa+0x14>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	001c      	movs	r4, r3
 8001d6e:	700b      	strb	r3, [r1, #0]
 8001d70:	0020      	movs	r0, r4
 8001d72:	bd10      	pop	{r4, pc}
 8001d74:	2a0a      	cmp	r2, #10
 8001d76:	d109      	bne.n	8001d8c <__itoa+0x2c>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	da07      	bge.n	8001d8c <__itoa+0x2c>
 8001d7c:	232d      	movs	r3, #45	; 0x2d
 8001d7e:	700b      	strb	r3, [r1, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	4240      	negs	r0, r0
 8001d84:	1861      	adds	r1, r4, r1
 8001d86:	f000 f825 	bl	8001dd4 <__utoa>
 8001d8a:	e7f1      	b.n	8001d70 <__itoa+0x10>
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	e7f9      	b.n	8001d84 <__itoa+0x24>

08001d90 <itoa>:
 8001d90:	b510      	push	{r4, lr}
 8001d92:	f7ff ffe5 	bl	8001d60 <__itoa>
 8001d96:	bd10      	pop	{r4, pc}

08001d98 <memcpy>:
 8001d98:	2300      	movs	r3, #0
 8001d9a:	b510      	push	{r4, lr}
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d100      	bne.n	8001da2 <memcpy+0xa>
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	5ccc      	ldrb	r4, [r1, r3]
 8001da4:	54c4      	strb	r4, [r0, r3]
 8001da6:	3301      	adds	r3, #1
 8001da8:	e7f8      	b.n	8001d9c <memcpy+0x4>

08001daa <memset>:
 8001daa:	0003      	movs	r3, r0
 8001dac:	1882      	adds	r2, r0, r2
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d100      	bne.n	8001db4 <memset+0xa>
 8001db2:	4770      	bx	lr
 8001db4:	7019      	strb	r1, [r3, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	e7f9      	b.n	8001dae <memset+0x4>

08001dba <strcat>:
 8001dba:	0002      	movs	r2, r0
 8001dbc:	b510      	push	{r4, lr}
 8001dbe:	7813      	ldrb	r3, [r2, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <strcat+0x16>
 8001dc4:	5ccc      	ldrb	r4, [r1, r3]
 8001dc6:	54d4      	strb	r4, [r2, r3]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	2c00      	cmp	r4, #0
 8001dcc:	d1fa      	bne.n	8001dc4 <strcat+0xa>
 8001dce:	bd10      	pop	{r4, pc}
 8001dd0:	3201      	adds	r2, #1
 8001dd2:	e7f4      	b.n	8001dbe <strcat+0x4>

08001dd4 <__utoa>:
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd6:	0017      	movs	r7, r2
 8001dd8:	b08f      	sub	sp, #60	; 0x3c
 8001dda:	2225      	movs	r2, #37	; 0x25
 8001ddc:	0006      	movs	r6, r0
 8001dde:	000d      	movs	r5, r1
 8001de0:	a804      	add	r0, sp, #16
 8001de2:	4918      	ldr	r1, [pc, #96]	; (8001e44 <__utoa+0x70>)
 8001de4:	f7ff ffd8 	bl	8001d98 <memcpy>
 8001de8:	aa04      	add	r2, sp, #16
 8001dea:	1ebb      	subs	r3, r7, #2
 8001dec:	2400      	movs	r4, #0
 8001dee:	9203      	str	r2, [sp, #12]
 8001df0:	2b22      	cmp	r3, #34	; 0x22
 8001df2:	d905      	bls.n	8001e00 <__utoa+0x2c>
 8001df4:	702c      	strb	r4, [r5, #0]
 8001df6:	0025      	movs	r5, r4
 8001df8:	0028      	movs	r0, r5
 8001dfa:	b00f      	add	sp, #60	; 0x3c
 8001dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfe:	9c01      	ldr	r4, [sp, #4]
 8001e00:	1c63      	adds	r3, r4, #1
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	18eb      	adds	r3, r5, r3
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	0030      	movs	r0, r6
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	0039      	movs	r1, r7
 8001e0e:	9302      	str	r3, [sp, #8]
 8001e10:	f7fe fa12 	bl	8000238 <__aeabi_uidivmod>
 8001e14:	9b03      	ldr	r3, [sp, #12]
 8001e16:	9a02      	ldr	r2, [sp, #8]
 8001e18:	5c5b      	ldrb	r3, [r3, r1]
 8001e1a:	0030      	movs	r0, r6
 8001e1c:	7013      	strb	r3, [r2, #0]
 8001e1e:	0039      	movs	r1, r7
 8001e20:	f7fe f984 	bl	800012c <__udivsi3>
 8001e24:	1e06      	subs	r6, r0, #0
 8001e26:	d1ea      	bne.n	8001dfe <__utoa+0x2a>
 8001e28:	9b00      	ldr	r3, [sp, #0]
 8001e2a:	7018      	strb	r0, [r3, #0]
 8001e2c:	002b      	movs	r3, r5
 8001e2e:	1b5a      	subs	r2, r3, r5
 8001e30:	4294      	cmp	r4, r2
 8001e32:	dde1      	ble.n	8001df8 <__utoa+0x24>
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	5d29      	ldrb	r1, [r5, r4]
 8001e38:	7019      	strb	r1, [r3, #0]
 8001e3a:	552a      	strb	r2, [r5, r4]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	3c01      	subs	r4, #1
 8001e40:	e7f5      	b.n	8001e2e <__utoa+0x5a>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	08001f66 	.word	0x08001f66

08001e48 <_init>:
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4e:	bc08      	pop	{r3}
 8001e50:	469e      	mov	lr, r3
 8001e52:	4770      	bx	lr

08001e54 <_fini>:
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e5a:	bc08      	pop	{r3}
 8001e5c:	469e      	mov	lr, r3
 8001e5e:	4770      	bx	lr
